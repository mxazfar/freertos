
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030a8  080030a8  000040a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  080030c8  080030c8  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c8  080030c8  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c8  080030c8  000040c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030cc  080030cc  000040cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080030d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004970  20000014  080030e4  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004984  080030e4  00005984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc64  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de2  00000000  00000000  00010ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00012a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d5  00000000  00000000  000134f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f57  00000000  00000000  00013ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4a2  00000000  00000000  00015c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0bb0  00000000  00000000  000210c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  000f1cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f4630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003090 	.word	0x08003090

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08003090 	.word	0x08003090

08000210 <displaySegmentTask>:
#include "q7seg.h"

#include "FreeRTOS.h"
#include "task.h"

void displaySegmentTask(void *params) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    static int calls = 0;

    while(1) {
        writeDisplaySingle(q7seg4, calls % 10, 1);
 8000218:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <displaySegmentTask+0x44>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <displaySegmentTask+0x48>)
 800021e:	fb83 1302 	smull	r1, r3, r3, r2
 8000222:	1099      	asrs	r1, r3, #2
 8000224:	17d3      	asrs	r3, r2, #31
 8000226:	1ac9      	subs	r1, r1, r3
 8000228:	460b      	mov	r3, r1
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	440b      	add	r3, r1
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	1ad1      	subs	r1, r2, r3
 8000232:	b2cb      	uxtb	r3, r1
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	2005      	movs	r0, #5
 800023a:	f002 fed1 	bl	8002fe0 <writeDisplaySingle>
        calls++;
 800023e:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <displaySegmentTask+0x44>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	4a03      	ldr	r2, [pc, #12]	@ (8000254 <displaySegmentTask+0x44>)
 8000246:	6013      	str	r3, [r2, #0]

        vTaskDelay(pdMS_TO_TICKS(500));
 8000248:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800024c:	f001 f830 	bl	80012b0 <vTaskDelay>
        writeDisplaySingle(q7seg4, calls % 10, 1);
 8000250:	bf00      	nop
 8000252:	e7e1      	b.n	8000218 <displaySegmentTask+0x8>
 8000254:	20000030 	.word	0x20000030
 8000258:	66666667 	.word	0x66666667

0800025c <main>:
    }
}

void main(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af02      	add	r7, sp, #8
    rcc_enable_peripheral_clk(rccClkGpioA);
 8000262:	2000      	movs	r0, #0
 8000264:	f002 fdb0 	bl	8002dc8 <rcc_enable_peripheral_clk>
    rcc_enable_peripheral_clk(rccClkGpioC);
 8000268:	2002      	movs	r0, #2
 800026a:	f002 fdad 	bl	8002dc8 <rcc_enable_peripheral_clk>

    gpio_pin_set_dir(gpioA, 5, gpioOutput);
 800026e:	2201      	movs	r2, #1
 8000270:	2105      	movs	r1, #5
 8000272:	2000      	movs	r0, #0
 8000274:	f002 fd20 	bl	8002cb8 <gpio_pin_set_dir>
    gpio_pin_set_dir(gpioC, 13, gpioInput);
 8000278:	2200      	movs	r2, #0
 800027a:	210d      	movs	r1, #13
 800027c:	2002      	movs	r0, #2
 800027e:	f002 fd1b 	bl	8002cb8 <gpio_pin_set_dir>

    gpio_level_t buttonPressed = gpioPinLow;
 8000282:	2300      	movs	r3, #0
 8000284:	71fb      	strb	r3, [r7, #7]

    initDisplay();
 8000286:	f002 fe07 	bl	8002e98 <initDisplay>

    xTaskCreate(displaySegmentTask, "Display", 500, NULL, 1, NULL);
 800028a:	2300      	movs	r3, #0
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2301      	movs	r3, #1
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000298:	4903      	ldr	r1, [pc, #12]	@ (80002a8 <main+0x4c>)
 800029a:	4804      	ldr	r0, [pc, #16]	@ (80002ac <main+0x50>)
 800029c:	f000 fec2 	bl	8001024 <xTaskCreate>

    vTaskStartScheduler();
 80002a0:	f001 f83c 	bl	800131c <vTaskStartScheduler>

    while(1) {}
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <main+0x48>
 80002a8:	080030a8 	.word	0x080030a8
 80002ac:	08000211 	.word	0x08000211

080002b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <NMI_Handler+0x4>

080002b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <HardFault_Handler+0x4>

080002c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <MemManage_Handler+0x4>

080002c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <BusFault_Handler+0x4>

080002d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <UsageFault_Handler+0x4>

080002d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ea:	f000 f845 	bl	8000378 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80002ee:	f001 fc63 	bl	8001bb8 <xTaskGetSchedulerState>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d001      	beq.n	80002fc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80002f8:	f002 fa5e 	bl	80027b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <SystemInit+0x20>)
 8000306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800030a:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <SystemInit+0x20>)
 800030c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800035c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000328:	f7ff ffea 	bl	8000300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	@ (8000364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	@ (8000370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000352:	f002 fe6b 	bl	800302c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000356:	f7ff ff81 	bl	800025c <main>
  bx  lr    
 800035a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000368:	080030d0 	.word	0x080030d0
  ldr r2, =_sbss
 800036c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000370:	20004984 	.word	0x20004984

08000374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <HAL_IncTick+0x20>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b06      	ldr	r3, [pc, #24]	@ (800039c <HAL_IncTick+0x24>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4413      	add	r3, r2
 8000388:	4a04      	ldr	r2, [pc, #16]	@ (800039c <HAL_IncTick+0x24>)
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000004 	.word	0x20000004
 800039c:	20000034 	.word	0x20000034

080003a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	4a07      	ldr	r2, [pc, #28]	@ (80003cc <vApplicationGetIdleTaskMemory+0x2c>)
 80003b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	4a06      	ldr	r2, [pc, #24]	@ (80003d0 <vApplicationGetIdleTaskMemory+0x30>)
 80003b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2280      	movs	r2, #128	@ 0x80
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	20000038 	.word	0x20000038
 80003d0:	20000094 	.word	0x20000094

080003d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	4a07      	ldr	r2, [pc, #28]	@ (8000400 <vApplicationGetTimerTaskMemory+0x2c>)
 80003e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4a06      	ldr	r2, [pc, #24]	@ (8000404 <vApplicationGetTimerTaskMemory+0x30>)
 80003ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	20000294 	.word	0x20000294
 8000404:	200002f0 	.word	0x200002f0

08000408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f103 0208 	add.w	r2, r3, #8
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f04f 32ff 	mov.w	r2, #4294967295
 8000420:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f103 0208 	add.w	r2, r3, #8
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f103 0208 	add.w	r2, r3, #8
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000462:	b480      	push	{r7}
 8000464:	b085      	sub	sp, #20
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	683a      	ldr	r2, [r7, #0]
 8000486:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	1c5a      	adds	r2, r3, #1
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	601a      	str	r2, [r3, #0]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80004aa:	b480      	push	{r7}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004c0:	d103      	bne.n	80004ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	691b      	ldr	r3, [r3, #16]
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	e00c      	b.n	80004e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3308      	adds	r3, #8
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	e002      	b.n	80004d8 <vListInsert+0x2e>
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d2f6      	bcs.n	80004d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	685a      	ldr	r2, [r3, #4]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	6892      	ldr	r2, [r2, #8]
 8000532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	6852      	ldr	r2, [r2, #4]
 800053c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	d103      	bne.n	8000550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	689a      	ldr	r2, [r3, #8]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1e5a      	subs	r2, r3, #1
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10b      	bne.n	800059c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000588:	f383 8811 	msr	BASEPRI, r3
 800058c:	f3bf 8f6f 	isb	sy
 8000590:	f3bf 8f4f 	dsb	sy
 8000594:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800059c:	f002 f87c 	bl	8002698 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005a8:	68f9      	ldr	r1, [r7, #12]
 80005aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80005ac:	fb01 f303 	mul.w	r3, r1, r3
 80005b0:	441a      	add	r2, r3
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2200      	movs	r2, #0
 80005ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005cc:	3b01      	subs	r3, #1
 80005ce:	68f9      	ldr	r1, [r7, #12]
 80005d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80005d2:	fb01 f303 	mul.w	r3, r1, r3
 80005d6:	441a      	add	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	22ff      	movs	r2, #255	@ 0xff
 80005e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	22ff      	movs	r2, #255	@ 0xff
 80005e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d114      	bne.n	800061c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d01a      	beq.n	8000630 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3310      	adds	r3, #16
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f91a 	bl	8001838 <xTaskRemoveFromEventList>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d012      	beq.n	8000630 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <xQueueGenericReset+0xd0>)
 800060c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	f3bf 8f6f 	isb	sy
 800061a:	e009      	b.n	8000630 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3310      	adds	r3, #16
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fef1 	bl	8000408 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3324      	adds	r3, #36	@ 0x24
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff feec 	bl	8000408 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000630:	f002 f864 	bl	80026fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000634:	2301      	movs	r3, #1
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000ed04 	.word	0xe000ed04

08000644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08e      	sub	sp, #56	@ 0x38
 8000648:	af02      	add	r7, sp, #8
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10b      	bne.n	8000670 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10b      	bne.n	800068e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8000676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067a:	f383 8811 	msr	BASEPRI, r3
 800067e:	f3bf 8f6f 	isb	sy
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	e7fd      	b.n	800068a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <xQueueGenericCreateStatic+0x56>
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <xQueueGenericCreateStatic+0x5a>
 800069a:	2301      	movs	r3, #1
 800069c:	e000      	b.n	80006a0 <xQueueGenericCreateStatic+0x5c>
 800069e:	2300      	movs	r3, #0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10b      	bne.n	80006bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80006a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006a8:	f383 8811 	msr	BASEPRI, r3
 80006ac:	f3bf 8f6f 	isb	sy
 80006b0:	f3bf 8f4f 	dsb	sy
 80006b4:	623b      	str	r3, [r7, #32]
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d102      	bne.n	80006c8 <xQueueGenericCreateStatic+0x84>
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <xQueueGenericCreateStatic+0x88>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <xQueueGenericCreateStatic+0x8a>
 80006cc:	2300      	movs	r3, #0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10b      	bne.n	80006ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	61fb      	str	r3, [r7, #28]
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	e7fd      	b.n	80006e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80006ea:	2350      	movs	r3, #80	@ 0x50
 80006ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b50      	cmp	r3, #80	@ 0x50
 80006f2:	d00b      	beq.n	800070c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	61bb      	str	r3, [r7, #24]
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800070c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8000712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00d      	beq.n	8000734 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800071a:	2201      	movs	r2, #1
 800071c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000720:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4613      	mov	r3, r2
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f000 f805 	bl	800073e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8000736:	4618      	mov	r0, r3
 8000738:	3730      	adds	r7, #48	@ 0x30
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	e002      	b.n	8000760 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800076c:	2101      	movs	r1, #1
 800076e:	69b8      	ldr	r0, [r7, #24]
 8000770:	f7ff fefe 	bl	8000570 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	78fa      	ldrb	r2, [r7, #3]
 8000778:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	@ 0x38
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000792:	2300      	movs	r3, #0
 8000794:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800079a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10b      	bne.n	80007b8 <xQueueGenericSend+0x34>
	__asm volatile
 80007a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d103      	bne.n	80007c6 <xQueueGenericSend+0x42>
 80007be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <xQueueGenericSend+0x46>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e000      	b.n	80007cc <xQueueGenericSend+0x48>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10b      	bne.n	80007e8 <xQueueGenericSend+0x64>
	__asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d103      	bne.n	80007f6 <xQueueGenericSend+0x72>
 80007ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d101      	bne.n	80007fa <xQueueGenericSend+0x76>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <xQueueGenericSend+0x78>
 80007fa:	2300      	movs	r3, #0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10b      	bne.n	8000818 <xQueueGenericSend+0x94>
	__asm volatile
 8000800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000804:	f383 8811 	msr	BASEPRI, r3
 8000808:	f3bf 8f6f 	isb	sy
 800080c:	f3bf 8f4f 	dsb	sy
 8000810:	623b      	str	r3, [r7, #32]
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000818:	f001 f9ce 	bl	8001bb8 <xTaskGetSchedulerState>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <xQueueGenericSend+0xa4>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <xQueueGenericSend+0xa8>
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <xQueueGenericSend+0xaa>
 800082c:	2300      	movs	r3, #0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10b      	bne.n	800084a <xQueueGenericSend+0xc6>
	__asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	61fb      	str	r3, [r7, #28]
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	e7fd      	b.n	8000846 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800084a:	f001 ff25 	bl	8002698 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800084e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000856:	429a      	cmp	r2, r3
 8000858:	d302      	bcc.n	8000860 <xQueueGenericSend+0xdc>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d129      	bne.n	80008b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000866:	f000 fa0f 	bl	8000c88 <prvCopyDataToQueue>
 800086a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800086c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800086e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000870:	2b00      	cmp	r3, #0
 8000872:	d010      	beq.n	8000896 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000876:	3324      	adds	r3, #36	@ 0x24
 8000878:	4618      	mov	r0, r3
 800087a:	f000 ffdd 	bl	8001838 <xTaskRemoveFromEventList>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000884:	4b3f      	ldr	r3, [pc, #252]	@ (8000984 <xQueueGenericSend+0x200>)
 8000886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	f3bf 8f4f 	dsb	sy
 8000890:	f3bf 8f6f 	isb	sy
 8000894:	e00a      	b.n	80008ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000898:	2b00      	cmp	r3, #0
 800089a:	d007      	beq.n	80008ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800089c:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <xQueueGenericSend+0x200>)
 800089e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80008ac:	f001 ff26 	bl	80026fc <vPortExitCritical>
				return pdPASS;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e063      	b.n	800097c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80008ba:	f001 ff1f 	bl	80026fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	e05c      	b.n	800097c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80008c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d106      	bne.n	80008d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f817 	bl	8001900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80008d2:	2301      	movs	r3, #1
 80008d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80008d6:	f001 ff11 	bl	80026fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80008da:	f000 fd87 	bl	80013ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80008de:	f001 fedb 	bl	8002698 <vPortEnterCritical>
 80008e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ee:	d103      	bne.n	80008f8 <xQueueGenericSend+0x174>
 80008f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80008f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d103      	bne.n	800090e <xQueueGenericSend+0x18a>
 8000906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800090e:	f001 fef5 	bl	80026fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000912:	1d3a      	adds	r2, r7, #4
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f806 	bl	800192c <xTaskCheckForTimeOut>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d124      	bne.n	8000970 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000926:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000928:	f000 faa6 	bl	8000e78 <prvIsQueueFull>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d018      	beq.n	8000964 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000934:	3310      	adds	r3, #16
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f000 ff2a 	bl	8001794 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000942:	f000 fa31 	bl	8000da8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000946:	f000 fd5f 	bl	8001408 <xTaskResumeAll>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	f47f af7c 	bne.w	800084a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <xQueueGenericSend+0x200>)
 8000954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	f3bf 8f4f 	dsb	sy
 800095e:	f3bf 8f6f 	isb	sy
 8000962:	e772      	b.n	800084a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000966:	f000 fa1f 	bl	8000da8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800096a:	f000 fd4d 	bl	8001408 <xTaskResumeAll>
 800096e:	e76c      	b.n	800084a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000972:	f000 fa19 	bl	8000da8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000976:	f000 fd47 	bl	8001408 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800097a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800097c:	4618      	mov	r0, r3
 800097e:	3738      	adds	r7, #56	@ 0x38
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	e000ed04 	.word	0xe000ed04

08000988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b090      	sub	sp, #64	@ 0x40
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800099a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10b      	bne.n	80009b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80009a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009a4:	f383 8811 	msr	BASEPRI, r3
 80009a8:	f3bf 8f6f 	isb	sy
 80009ac:	f3bf 8f4f 	dsb	sy
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <xQueueGenericSendFromISR+0x3e>
 80009be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <xQueueGenericSendFromISR+0x42>
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <xQueueGenericSendFromISR+0x44>
 80009ca:	2300      	movs	r3, #0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10b      	bne.n	80009e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80009d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d103      	bne.n	80009f6 <xQueueGenericSendFromISR+0x6e>
 80009ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <xQueueGenericSendFromISR+0x72>
 80009f6:	2301      	movs	r3, #1
 80009f8:	e000      	b.n	80009fc <xQueueGenericSendFromISR+0x74>
 80009fa:	2300      	movs	r3, #0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10b      	bne.n	8000a18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8000a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a04:	f383 8811 	msr	BASEPRI, r3
 8000a08:	f3bf 8f6f 	isb	sy
 8000a0c:	f3bf 8f4f 	dsb	sy
 8000a10:	623b      	str	r3, [r7, #32]
}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a18:	f001 ff1e 	bl	8002858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000a1c:	f3ef 8211 	mrs	r2, BASEPRI
 8000a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a24:	f383 8811 	msr	BASEPRI, r3
 8000a28:	f3bf 8f6f 	isb	sy
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	61fa      	str	r2, [r7, #28]
 8000a32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000a34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d302      	bcc.n	8000a4a <xQueueGenericSendFromISR+0xc2>
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d12f      	bne.n	8000aaa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000a60:	f000 f912 	bl	8000c88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000a64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d112      	bne.n	8000a94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d016      	beq.n	8000aa4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a78:	3324      	adds	r3, #36	@ 0x24
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fedc 	bl	8001838 <xTaskRemoveFromEventList>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00e      	beq.n	8000aa4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e007      	b.n	8000aa4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8000aa8:	e001      	b.n	8000aae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ab0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000ab8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3740      	adds	r7, #64	@ 0x40
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	@ 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10b      	bne.n	8000af6 <xQueueReceive+0x32>
	__asm volatile
 8000ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ae2:	f383 8811 	msr	BASEPRI, r3
 8000ae6:	f3bf 8f6f 	isb	sy
 8000aea:	f3bf 8f4f 	dsb	sy
 8000aee:	623b      	str	r3, [r7, #32]
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	e7fd      	b.n	8000af2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d103      	bne.n	8000b04 <xQueueReceive+0x40>
 8000afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <xQueueReceive+0x44>
 8000b04:	2301      	movs	r3, #1
 8000b06:	e000      	b.n	8000b0a <xQueueReceive+0x46>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10b      	bne.n	8000b26 <xQueueReceive+0x62>
	__asm volatile
 8000b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b12:	f383 8811 	msr	BASEPRI, r3
 8000b16:	f3bf 8f6f 	isb	sy
 8000b1a:	f3bf 8f4f 	dsb	sy
 8000b1e:	61fb      	str	r3, [r7, #28]
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	e7fd      	b.n	8000b22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b26:	f001 f847 	bl	8001bb8 <xTaskGetSchedulerState>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <xQueueReceive+0x72>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <xQueueReceive+0x76>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <xQueueReceive+0x78>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10b      	bne.n	8000b58 <xQueueReceive+0x94>
	__asm volatile
 8000b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	61bb      	str	r3, [r7, #24]
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000b58:	f001 fd9e 	bl	8002698 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d01f      	beq.n	8000ba8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b6c:	f000 f8f6 	bl	8000d5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00f      	beq.n	8000ba0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b82:	3310      	adds	r3, #16
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fe57 	bl	8001838 <xTaskRemoveFromEventList>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d007      	beq.n	8000ba0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000b90:	4b3c      	ldr	r3, [pc, #240]	@ (8000c84 <xQueueReceive+0x1c0>)
 8000b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	f3bf 8f4f 	dsb	sy
 8000b9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000ba0:	f001 fdac 	bl	80026fc <vPortExitCritical>
				return pdPASS;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e069      	b.n	8000c7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d103      	bne.n	8000bb6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000bae:	f001 fda5 	bl	80026fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e062      	b.n	8000c7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d106      	bne.n	8000bca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fe9d 	bl	8001900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000bca:	f001 fd97 	bl	80026fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000bce:	f000 fc0d 	bl	80013ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000bd2:	f001 fd61 	bl	8002698 <vPortEnterCritical>
 8000bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be2:	d103      	bne.n	8000bec <xQueueReceive+0x128>
 8000be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d103      	bne.n	8000c02 <xQueueReceive+0x13e>
 8000bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000c02:	f001 fd7b 	bl	80026fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c06:	1d3a      	adds	r2, r7, #4
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fe8c 	bl	800192c <xTaskCheckForTimeOut>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d123      	bne.n	8000c62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c1c:	f000 f916 	bl	8000e4c <prvIsQueueEmpty>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d017      	beq.n	8000c56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c28:	3324      	adds	r3, #36	@ 0x24
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fdb0 	bl	8001794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000c34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c36:	f000 f8b7 	bl	8000da8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000c3a:	f000 fbe5 	bl	8001408 <xTaskResumeAll>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d189      	bne.n	8000b58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <xQueueReceive+0x1c0>)
 8000c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	e780      	b.n	8000b58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c58:	f000 f8a6 	bl	8000da8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000c5c:	f000 fbd4 	bl	8001408 <xTaskResumeAll>
 8000c60:	e77a      	b.n	8000b58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c64:	f000 f8a0 	bl	8000da8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000c68:	f000 fbce 	bl	8001408 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c6e:	f000 f8ed 	bl	8000e4c <prvIsQueueEmpty>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f43f af6f 	beq.w	8000b58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000c7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3730      	adds	r7, #48	@ 0x30
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	e000ed04 	.word	0xe000ed04

08000c88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10d      	bne.n	8000cc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14d      	bne.n	8000d4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 ff9e 	bl	8001bf4 <xTaskPriorityDisinherit>
 8000cb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	e043      	b.n	8000d4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d119      	bne.n	8000cfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6858      	ldr	r0, [r3, #4]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	f002 f9ce 	bl	8003074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	441a      	add	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d32b      	bcc.n	8000d4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	e026      	b.n	8000d4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	68d8      	ldr	r0, [r3, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	461a      	mov	r2, r3
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	f002 f9b4 	bl	8003074 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	425b      	negs	r3, r3
 8000d16:	441a      	add	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	425b      	negs	r3, r3
 8000d32:	441a      	add	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d105      	bne.n	8000d4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8000d52:	697b      	ldr	r3, [r7, #20]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d018      	beq.n	8000da0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	441a      	add	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d303      	bcc.n	8000d90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68d9      	ldr	r1, [r3, #12]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	461a      	mov	r2, r3
 8000d9a:	6838      	ldr	r0, [r7, #0]
 8000d9c:	f002 f96a 	bl	8003074 <memcpy>
	}
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000db0:	f001 fc72 	bl	8002698 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000dba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000dbc:	e011      	b.n	8000de2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d012      	beq.n	8000dec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3324      	adds	r3, #36	@ 0x24
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fd34 	bl	8001838 <xTaskRemoveFromEventList>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000dd6:	f000 fe0d 	bl	80019f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	dce9      	bgt.n	8000dbe <prvUnlockQueue+0x16>
 8000dea:	e000      	b.n	8000dee <prvUnlockQueue+0x46>
					break;
 8000dec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	22ff      	movs	r2, #255	@ 0xff
 8000df2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8000df6:	f001 fc81 	bl	80026fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000dfa:	f001 fc4d 	bl	8002698 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e06:	e011      	b.n	8000e2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d012      	beq.n	8000e36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3310      	adds	r3, #16
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fd0f 	bl	8001838 <xTaskRemoveFromEventList>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000e20:	f000 fde8 	bl	80019f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	dce9      	bgt.n	8000e08 <prvUnlockQueue+0x60>
 8000e34:	e000      	b.n	8000e38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000e36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	22ff      	movs	r2, #255	@ 0xff
 8000e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8000e40:	f001 fc5c 	bl	80026fc <vPortExitCritical>
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000e54:	f001 fc20 	bl	8002698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	e001      	b.n	8000e6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000e6a:	f001 fc47 	bl	80026fc <vPortExitCritical>

	return xReturn;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000e80:	f001 fc0a 	bl	8002698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d102      	bne.n	8000e96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e001      	b.n	8000e9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000e9a:	f001 fc2f 	bl	80026fc <vPortExitCritical>

	return xReturn;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	e014      	b.n	8000ee2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <vQueueAddToRegistry+0x50>)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10b      	bne.n	8000edc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <vQueueAddToRegistry+0x50>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <vQueueAddToRegistry+0x50>)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8000eda:	e006      	b.n	8000eea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d9e7      	bls.n	8000eb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200006f0 	.word	0x200006f0

08000efc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000f0c:	f001 fbc4 	bl	8002698 <vPortEnterCritical>
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d103      	bne.n	8000f26 <vQueueWaitForMessageRestricted+0x2a>
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f32:	d103      	bne.n	8000f3c <vQueueWaitForMessageRestricted+0x40>
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000f3c:	f001 fbde 	bl	80026fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d106      	bne.n	8000f56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3324      	adds	r3, #36	@ 0x24
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fc45 	bl	80017e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff26 	bl	8000da8 <prvUnlockQueue>
	}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	@ 0x38
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8000f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10b      	bne.n	8000f90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8000f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f7c:	f383 8811 	msr	BASEPRI, r3
 8000f80:	f3bf 8f6f 	isb	sy
 8000f84:	f3bf 8f4f 	dsb	sy
 8000f88:	623b      	str	r3, [r7, #32]
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8000f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10b      	bne.n	8000fae <xTaskCreateStatic+0x4a>
	__asm volatile
 8000f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f9a:	f383 8811 	msr	BASEPRI, r3
 8000f9e:	f3bf 8f6f 	isb	sy
 8000fa2:	f3bf 8f4f 	dsb	sy
 8000fa6:	61fb      	str	r3, [r7, #28]
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	e7fd      	b.n	8000faa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8000fae:	235c      	movs	r3, #92	@ 0x5c
 8000fb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8000fb6:	d00b      	beq.n	8000fd0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8000fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fbc:	f383 8811 	msr	BASEPRI, r3
 8000fc0:	f3bf 8f6f 	isb	sy
 8000fc4:	f3bf 8f4f 	dsb	sy
 8000fc8:	61bb      	str	r3, [r7, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8000fd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8000fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d01e      	beq.n	8001016 <xTaskCreateStatic+0xb2>
 8000fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d01b      	beq.n	8001016 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fe6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fea:	2202      	movs	r2, #2
 8000fec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	9303      	str	r3, [sp, #12]
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f850 	bl	80010ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800100e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001010:	f000 f8de 	bl	80011d0 <prvAddNewTaskToReadyList>
 8001014:	e001      	b.n	800101a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800101a:	697b      	ldr	r3, [r7, #20]
	}
 800101c:	4618      	mov	r0, r3
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af04      	add	r7, sp, #16
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4613      	mov	r3, r2
 8001032:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fc4f 	bl	80028dc <pvPortMalloc>
 800103e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00e      	beq.n	8001064 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001046:	205c      	movs	r0, #92	@ 0x5c
 8001048:	f001 fc48 	bl	80028dc <pvPortMalloc>
 800104c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	631a      	str	r2, [r3, #48]	@ 0x30
 800105a:	e005      	b.n	8001068 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f001 fd0b 	bl	8002a78 <vPortFree>
 8001062:	e001      	b.n	8001068 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d017      	beq.n	800109e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001076:	88fa      	ldrh	r2, [r7, #6]
 8001078:	2300      	movs	r3, #0
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f80e 	bl	80010ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001092:	69f8      	ldr	r0, [r7, #28]
 8001094:	f000 f89c 	bl	80011d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	e002      	b.n	80010a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80010a4:	69bb      	ldr	r3, [r7, #24]
	}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80010bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	461a      	mov	r2, r3
 80010c6:	21a5      	movs	r1, #165	@ 0xa5
 80010c8:	f001 ffa8 	bl	800301c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80010cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80010d6:	3b01      	subs	r3, #1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f023 0307 	bic.w	r3, r3, #7
 80010e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80010f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	617b      	str	r3, [r7, #20]
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01f      	beq.n	800114e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e012      	b.n	800113a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	4413      	add	r3, r2
 800111a:	7819      	ldrb	r1, [r3, #0]
 800111c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	4413      	add	r3, r2
 8001122:	3334      	adds	r3, #52	@ 0x34
 8001124:	460a      	mov	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3301      	adds	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d9e9      	bls.n	8001114 <prvInitialiseNewTask+0x66>
 8001140:	e000      	b.n	8001144 <prvInitialiseNewTask+0x96>
			{
				break;
 8001142:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800114c:	e003      	b.n	8001156 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800114e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001158:	2b37      	cmp	r3, #55	@ 0x37
 800115a:	d901      	bls.n	8001160 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800115c:	2337      	movs	r3, #55	@ 0x37
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001162:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001164:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800116a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800116c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800116e:	2200      	movs	r2, #0
 8001170:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001174:	3304      	adds	r3, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f966 	bl	8000448 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800117c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800117e:	3318      	adds	r3, #24
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f961 	bl	8000448 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800118a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800118c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800119a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800119c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800119e:	2200      	movs	r2, #0
 80011a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80011a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	68f9      	ldr	r1, [r7, #12]
 80011ae:	69b8      	ldr	r0, [r7, #24]
 80011b0:	f001 f93e 	bl	8002430 <pxPortInitialiseStack>
 80011b4:	4602      	mov	r2, r0
 80011b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80011ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80011c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80011d8:	f001 fa5e 	bl	8002698 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <prvAddNewTaskToReadyList+0xc4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001294 <prvAddNewTaskToReadyList+0xc4>)
 80011e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <prvAddNewTaskToReadyList+0xc8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80011ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001298 <prvAddNewTaskToReadyList+0xc8>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <prvAddNewTaskToReadyList+0xc4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d110      	bne.n	800121e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80011fc:	f000 fc1e 	bl	8001a3c <prvInitialiseTaskLists>
 8001200:	e00d      	b.n	800121e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001202:	4b26      	ldr	r3, [pc, #152]	@ (800129c <prvAddNewTaskToReadyList+0xcc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <prvAddNewTaskToReadyList+0xc8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001214:	429a      	cmp	r2, r3
 8001216:	d802      	bhi.n	800121e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001218:	4a1f      	ldr	r2, [pc, #124]	@ (8001298 <prvAddNewTaskToReadyList+0xc8>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <prvAddNewTaskToReadyList+0xd0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <prvAddNewTaskToReadyList+0xd0>)
 8001226:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <prvAddNewTaskToReadyList+0xd0>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <prvAddNewTaskToReadyList+0xd4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d903      	bls.n	8001244 <prvAddNewTaskToReadyList+0x74>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001240:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <prvAddNewTaskToReadyList+0xd4>)
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4a15      	ldr	r2, [pc, #84]	@ (80012a8 <prvAddNewTaskToReadyList+0xd8>)
 8001252:	441a      	add	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3304      	adds	r3, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f7ff f901 	bl	8000462 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001260:	f001 fa4c 	bl	80026fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001264:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <prvAddNewTaskToReadyList+0xcc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00e      	beq.n	800128a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <prvAddNewTaskToReadyList+0xc8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001276:	429a      	cmp	r2, r3
 8001278:	d207      	bcs.n	800128a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <prvAddNewTaskToReadyList+0xdc>)
 800127c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000c04 	.word	0x20000c04
 8001298:	20000730 	.word	0x20000730
 800129c:	20000c10 	.word	0x20000c10
 80012a0:	20000c20 	.word	0x20000c20
 80012a4:	20000c0c 	.word	0x20000c0c
 80012a8:	20000734 	.word	0x20000734
 80012ac:	e000ed04 	.word	0xe000ed04

080012b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d018      	beq.n	80012f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <vTaskDelay+0x64>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <vTaskDelay+0x32>
	__asm volatile
 80012ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	60bb      	str	r3, [r7, #8]
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	e7fd      	b.n	80012de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80012e2:	f000 f883 	bl	80013ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80012e6:	2100      	movs	r1, #0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 fcf3 	bl	8001cd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80012ee:	f000 f88b 	bl	8001408 <xTaskResumeAll>
 80012f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d107      	bne.n	800130a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <vTaskDelay+0x68>)
 80012fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	f3bf 8f4f 	dsb	sy
 8001306:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000c2c 	.word	0x20000c2c
 8001318:	e000ed04 	.word	0xe000ed04

0800131c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800132a:	463a      	mov	r2, r7
 800132c:	1d39      	adds	r1, r7, #4
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f834 	bl	80003a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	9202      	str	r2, [sp, #8]
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	2300      	movs	r3, #0
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	460a      	mov	r2, r1
 800134a:	4922      	ldr	r1, [pc, #136]	@ (80013d4 <vTaskStartScheduler+0xb8>)
 800134c:	4822      	ldr	r0, [pc, #136]	@ (80013d8 <vTaskStartScheduler+0xbc>)
 800134e:	f7ff fe09 	bl	8000f64 <xTaskCreateStatic>
 8001352:	4603      	mov	r3, r0
 8001354:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <vTaskStartScheduler+0xc0>)
 8001356:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001358:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <vTaskStartScheduler+0xc0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001360:	2301      	movs	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e001      	b.n	800136a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d102      	bne.n	8001376 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001370:	f000 fd04 	bl	8001d7c <xTimerCreateTimerTask>
 8001374:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d116      	bne.n	80013aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800137c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001380:	f383 8811 	msr	BASEPRI, r3
 8001384:	f3bf 8f6f 	isb	sy
 8001388:	f3bf 8f4f 	dsb	sy
 800138c:	613b      	str	r3, [r7, #16]
}
 800138e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <vTaskStartScheduler+0xc4>)
 8001392:	f04f 32ff 	mov.w	r2, #4294967295
 8001396:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <vTaskStartScheduler+0xc8>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <vTaskStartScheduler+0xcc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80013a4:	f001 f8d4 	bl	8002550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80013a8:	e00f      	b.n	80013ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d10b      	bne.n	80013ca <vTaskStartScheduler+0xae>
	__asm volatile
 80013b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013b6:	f383 8811 	msr	BASEPRI, r3
 80013ba:	f3bf 8f6f 	isb	sy
 80013be:	f3bf 8f4f 	dsb	sy
 80013c2:	60fb      	str	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	e7fd      	b.n	80013c6 <vTaskStartScheduler+0xaa>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	080030b0 	.word	0x080030b0
 80013d8:	08001a0d 	.word	0x08001a0d
 80013dc:	20000c28 	.word	0x20000c28
 80013e0:	20000c24 	.word	0x20000c24
 80013e4:	20000c10 	.word	0x20000c10
 80013e8:	20000c08 	.word	0x20000c08

080013ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <vTaskSuspendAll+0x18>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a03      	ldr	r2, [pc, #12]	@ (8001404 <vTaskSuspendAll+0x18>)
 80013f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	20000c2c 	.word	0x20000c2c

08001408 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001416:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <xTaskResumeAll+0x118>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10b      	bne.n	8001436 <xTaskResumeAll+0x2e>
	__asm volatile
 800141e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001422:	f383 8811 	msr	BASEPRI, r3
 8001426:	f3bf 8f6f 	isb	sy
 800142a:	f3bf 8f4f 	dsb	sy
 800142e:	603b      	str	r3, [r7, #0]
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	e7fd      	b.n	8001432 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001436:	f001 f92f 	bl	8002698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800143a:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <xTaskResumeAll+0x118>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3b01      	subs	r3, #1
 8001440:	4a37      	ldr	r2, [pc, #220]	@ (8001520 <xTaskResumeAll+0x118>)
 8001442:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001444:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <xTaskResumeAll+0x118>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d162      	bne.n	8001512 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800144c:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <xTaskResumeAll+0x11c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05e      	beq.n	8001512 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001454:	e02f      	b.n	80014b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001456:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <xTaskResumeAll+0x120>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3318      	adds	r3, #24
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f85a 	bl	800051c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3304      	adds	r3, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f855 	bl	800051c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <xTaskResumeAll+0x124>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d903      	bls.n	8001486 <xTaskResumeAll+0x7e>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001482:	4a2a      	ldr	r2, [pc, #168]	@ (800152c <xTaskResumeAll+0x124>)
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <xTaskResumeAll+0x128>)
 8001494:	441a      	add	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3304      	adds	r3, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7fe ffe0 	bl	8000462 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <xTaskResumeAll+0x12c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d302      	bcc.n	80014b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80014b0:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <xTaskResumeAll+0x130>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <xTaskResumeAll+0x120>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1cb      	bne.n	8001456 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80014c4:	f000 fb58 	bl	8001b78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80014c8:	4b1c      	ldr	r3, [pc, #112]	@ (800153c <xTaskResumeAll+0x134>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80014d4:	f000 f846 	bl	8001564 <xTaskIncrementTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <xTaskResumeAll+0x130>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f1      	bne.n	80014d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <xTaskResumeAll+0x134>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <xTaskResumeAll+0x130>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80014fe:	2301      	movs	r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <xTaskResumeAll+0x138>)
 8001504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	f3bf 8f4f 	dsb	sy
 800150e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001512:	f001 f8f3 	bl	80026fc <vPortExitCritical>

	return xAlreadyYielded;
 8001516:	68bb      	ldr	r3, [r7, #8]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000c2c 	.word	0x20000c2c
 8001524:	20000c04 	.word	0x20000c04
 8001528:	20000bc4 	.word	0x20000bc4
 800152c:	20000c0c 	.word	0x20000c0c
 8001530:	20000734 	.word	0x20000734
 8001534:	20000730 	.word	0x20000730
 8001538:	20000c18 	.word	0x20000c18
 800153c:	20000c14 	.word	0x20000c14
 8001540:	e000ed04 	.word	0xe000ed04

08001544 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <xTaskGetTickCount+0x1c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000c08 	.word	0x20000c08

08001564 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800156e:	4b4f      	ldr	r3, [pc, #316]	@ (80016ac <xTaskIncrementTick+0x148>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 8090 	bne.w	8001698 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001578:	4b4d      	ldr	r3, [pc, #308]	@ (80016b0 <xTaskIncrementTick+0x14c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001580:	4a4b      	ldr	r2, [pc, #300]	@ (80016b0 <xTaskIncrementTick+0x14c>)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d121      	bne.n	80015d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800158c:	4b49      	ldr	r3, [pc, #292]	@ (80016b4 <xTaskIncrementTick+0x150>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8001596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800159a:	f383 8811 	msr	BASEPRI, r3
 800159e:	f3bf 8f6f 	isb	sy
 80015a2:	f3bf 8f4f 	dsb	sy
 80015a6:	603b      	str	r3, [r7, #0]
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <xTaskIncrementTick+0x46>
 80015ae:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <xTaskIncrementTick+0x150>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b40      	ldr	r3, [pc, #256]	@ (80016b8 <xTaskIncrementTick+0x154>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a3e      	ldr	r2, [pc, #248]	@ (80016b4 <xTaskIncrementTick+0x150>)
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4a3e      	ldr	r2, [pc, #248]	@ (80016b8 <xTaskIncrementTick+0x154>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b3e      	ldr	r3, [pc, #248]	@ (80016bc <xTaskIncrementTick+0x158>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a3c      	ldr	r2, [pc, #240]	@ (80016bc <xTaskIncrementTick+0x158>)
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	f000 fad4 	bl	8001b78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80015d0:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <xTaskIncrementTick+0x15c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d349      	bcc.n	800166e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015da:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <xTaskIncrementTick+0x150>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d104      	bne.n	80015ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015e4:	4b36      	ldr	r3, [pc, #216]	@ (80016c0 <xTaskIncrementTick+0x15c>)
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ea:	601a      	str	r2, [r3, #0]
					break;
 80015ec:	e03f      	b.n	800166e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015ee:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <xTaskIncrementTick+0x150>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	d203      	bcs.n	800160e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001606:	4a2e      	ldr	r2, [pc, #184]	@ (80016c0 <xTaskIncrementTick+0x15c>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800160c:	e02f      	b.n	800166e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3304      	adds	r3, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff82 	bl	800051c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d004      	beq.n	800162a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	3318      	adds	r3, #24
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff79 	bl	800051c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162e:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <xTaskIncrementTick+0x160>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d903      	bls.n	800163e <xTaskIncrementTick+0xda>
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163a:	4a22      	ldr	r2, [pc, #136]	@ (80016c4 <xTaskIncrementTick+0x160>)
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4a1f      	ldr	r2, [pc, #124]	@ (80016c8 <xTaskIncrementTick+0x164>)
 800164c:	441a      	add	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	3304      	adds	r3, #4
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f7fe ff04 	bl	8000462 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <xTaskIncrementTick+0x168>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	429a      	cmp	r2, r3
 8001666:	d3b8      	bcc.n	80015da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001668:	2301      	movs	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800166c:	e7b5      	b.n	80015da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <xTaskIncrementTick+0x168>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001674:	4914      	ldr	r1, [pc, #80]	@ (80016c8 <xTaskIncrementTick+0x164>)
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d901      	bls.n	800168a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8001686:	2301      	movs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <xTaskIncrementTick+0x16c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8001692:	2301      	movs	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e004      	b.n	80016a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <xTaskIncrementTick+0x170>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <xTaskIncrementTick+0x170>)
 80016a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80016a2:	697b      	ldr	r3, [r7, #20]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000c2c 	.word	0x20000c2c
 80016b0:	20000c08 	.word	0x20000c08
 80016b4:	20000bbc 	.word	0x20000bbc
 80016b8:	20000bc0 	.word	0x20000bc0
 80016bc:	20000c1c 	.word	0x20000c1c
 80016c0:	20000c24 	.word	0x20000c24
 80016c4:	20000c0c 	.word	0x20000c0c
 80016c8:	20000734 	.word	0x20000734
 80016cc:	20000730 	.word	0x20000730
 80016d0:	20000c18 	.word	0x20000c18
 80016d4:	20000c14 	.word	0x20000c14

080016d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <vTaskSwitchContext+0xa8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80016e6:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <vTaskSwitchContext+0xac>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80016ec:	e042      	b.n	8001774 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80016ee:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <vTaskSwitchContext+0xac>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016f4:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <vTaskSwitchContext+0xb0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e011      	b.n	8001720 <vTaskSwitchContext+0x48>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10b      	bne.n	800171a <vTaskSwitchContext+0x42>
	__asm volatile
 8001702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	607b      	str	r3, [r7, #4]
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	e7fd      	b.n	8001716 <vTaskSwitchContext+0x3e>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3b01      	subs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	491a      	ldr	r1, [pc, #104]	@ (800178c <vTaskSwitchContext+0xb4>)
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0e3      	beq.n	80016fc <vTaskSwitchContext+0x24>
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4a13      	ldr	r2, [pc, #76]	@ (800178c <vTaskSwitchContext+0xb4>)
 8001740:	4413      	add	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3308      	adds	r3, #8
 8001756:	429a      	cmp	r2, r3
 8001758:	d104      	bne.n	8001764 <vTaskSwitchContext+0x8c>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	4a09      	ldr	r2, [pc, #36]	@ (8001790 <vTaskSwitchContext+0xb8>)
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <vTaskSwitchContext+0xb0>)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20000c2c 	.word	0x20000c2c
 8001784:	20000c18 	.word	0x20000c18
 8001788:	20000c0c 	.word	0x20000c0c
 800178c:	20000734 	.word	0x20000734
 8001790:	20000730 	.word	0x20000730

08001794 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10b      	bne.n	80017bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80017a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017a8:	f383 8811 	msr	BASEPRI, r3
 80017ac:	f3bf 8f6f 	isb	sy
 80017b0:	f3bf 8f4f 	dsb	sy
 80017b4:	60fb      	str	r3, [r7, #12]
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <vTaskPlaceOnEventList+0x48>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3318      	adds	r3, #24
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe fe70 	bl	80004aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80017ca:	2101      	movs	r1, #1
 80017cc:	6838      	ldr	r0, [r7, #0]
 80017ce:	f000 fa81 	bl	8001cd4 <prvAddCurrentTaskToDelayedList>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000730 	.word	0x20000730

080017e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10b      	bne.n	800180a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80017f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017f6:	f383 8811 	msr	BASEPRI, r3
 80017fa:	f3bf 8f6f 	isb	sy
 80017fe:	f3bf 8f4f 	dsb	sy
 8001802:	617b      	str	r3, [r7, #20]
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	e7fd      	b.n	8001806 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <vTaskPlaceOnEventListRestricted+0x54>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3318      	adds	r3, #24
 8001810:	4619      	mov	r1, r3
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7fe fe25 	bl	8000462 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	68b8      	ldr	r0, [r7, #8]
 8001828:	f000 fa54 	bl	8001cd4 <prvAddCurrentTaskToDelayedList>
	}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000730 	.word	0x20000730

08001838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10b      	bne.n	8001866 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800184e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001852:	f383 8811 	msr	BASEPRI, r3
 8001856:	f3bf 8f6f 	isb	sy
 800185a:	f3bf 8f4f 	dsb	sy
 800185e:	60fb      	str	r3, [r7, #12]
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	e7fd      	b.n	8001862 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	3318      	adds	r3, #24
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe56 	bl	800051c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001870:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <xTaskRemoveFromEventList+0xb0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11d      	bne.n	80018b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	3304      	adds	r3, #4
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe4d 	bl	800051c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <xTaskRemoveFromEventList+0xb4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d903      	bls.n	8001896 <xTaskRemoveFromEventList+0x5e>
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001892:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <xTaskRemoveFromEventList+0xb4>)
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <xTaskRemoveFromEventList+0xb8>)
 80018a4:	441a      	add	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	3304      	adds	r3, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f7fe fdd8 	bl	8000462 <vListInsertEnd>
 80018b2:	e005      	b.n	80018c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	3318      	adds	r3, #24
 80018b8:	4619      	mov	r1, r3
 80018ba:	480e      	ldr	r0, [pc, #56]	@ (80018f4 <xTaskRemoveFromEventList+0xbc>)
 80018bc:	f7fe fdd1 	bl	8000462 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <xTaskRemoveFromEventList+0xc0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d905      	bls.n	80018da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <xTaskRemoveFromEventList+0xc4>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e001      	b.n	80018de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80018de:	697b      	ldr	r3, [r7, #20]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000c2c 	.word	0x20000c2c
 80018ec:	20000c0c 	.word	0x20000c0c
 80018f0:	20000734 	.word	0x20000734
 80018f4:	20000bc4 	.word	0x20000bc4
 80018f8:	20000730 	.word	0x20000730
 80018fc:	20000c18 	.word	0x20000c18

08001900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <vTaskInternalSetTimeOutState+0x24>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <vTaskInternalSetTimeOutState+0x28>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	605a      	str	r2, [r3, #4]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	20000c1c 	.word	0x20000c1c
 8001928:	20000c08 	.word	0x20000c08

0800192c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10b      	bne.n	8001954 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800193c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001940:	f383 8811 	msr	BASEPRI, r3
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	613b      	str	r3, [r7, #16]
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10b      	bne.n	8001972 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800195a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800195e:	f383 8811 	msr	BASEPRI, r3
 8001962:	f3bf 8f6f 	isb	sy
 8001966:	f3bf 8f4f 	dsb	sy
 800196a:	60fb      	str	r3, [r7, #12]
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	e7fd      	b.n	800196e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8001972:	f000 fe91 	bl	8002698 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001976:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <xTaskCheckForTimeOut+0xc0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198e:	d102      	bne.n	8001996 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	e023      	b.n	80019de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <xTaskCheckForTimeOut+0xc4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d007      	beq.n	80019b2 <xTaskCheckForTimeOut+0x86>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d302      	bcc.n	80019b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	e015      	b.n	80019de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d20b      	bcs.n	80019d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1ad2      	subs	r2, r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff99 	bl	8001900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e004      	b.n	80019de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80019da:	2301      	movs	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80019de:	f000 fe8d 	bl	80026fc <vPortExitCritical>

	return xReturn;
 80019e2:	69fb      	ldr	r3, [r7, #28]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000c08 	.word	0x20000c08
 80019f0:	20000c1c 	.word	0x20000c1c

080019f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <vTaskMissedYield+0x14>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000c18 	.word	0x20000c18

08001a0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001a14:	f000 f852 	bl	8001abc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <prvIdleTask+0x28>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d9f9      	bls.n	8001a14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <prvIdleTask+0x2c>)
 8001a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001a30:	e7f0      	b.n	8001a14 <prvIdleTask+0x8>
 8001a32:	bf00      	nop
 8001a34:	20000734 	.word	0x20000734
 8001a38:	e000ed04 	.word	0xe000ed04

08001a3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e00c      	b.n	8001a62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <prvInitialiseTaskLists+0x60>)
 8001a54:	4413      	add	r3, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fcd6 	bl	8000408 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b37      	cmp	r3, #55	@ 0x37
 8001a66:	d9ef      	bls.n	8001a48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001a68:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <prvInitialiseTaskLists+0x64>)
 8001a6a:	f7fe fccd 	bl	8000408 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a6e:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <prvInitialiseTaskLists+0x68>)
 8001a70:	f7fe fcca 	bl	8000408 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <prvInitialiseTaskLists+0x6c>)
 8001a76:	f7fe fcc7 	bl	8000408 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001a7a:	480c      	ldr	r0, [pc, #48]	@ (8001aac <prvInitialiseTaskLists+0x70>)
 8001a7c:	f7fe fcc4 	bl	8000408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001a80:	480b      	ldr	r0, [pc, #44]	@ (8001ab0 <prvInitialiseTaskLists+0x74>)
 8001a82:	f7fe fcc1 	bl	8000408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <prvInitialiseTaskLists+0x78>)
 8001a88:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <prvInitialiseTaskLists+0x64>)
 8001a8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <prvInitialiseTaskLists+0x7c>)
 8001a8e:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <prvInitialiseTaskLists+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000734 	.word	0x20000734
 8001aa0:	20000b94 	.word	0x20000b94
 8001aa4:	20000ba8 	.word	0x20000ba8
 8001aa8:	20000bc4 	.word	0x20000bc4
 8001aac:	20000bd8 	.word	0x20000bd8
 8001ab0:	20000bf0 	.word	0x20000bf0
 8001ab4:	20000bbc 	.word	0x20000bbc
 8001ab8:	20000bc0 	.word	0x20000bc0

08001abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ac2:	e019      	b.n	8001af8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001ac4:	f000 fde8 	bl	8002698 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <prvCheckTasksWaitingTermination+0x50>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd21 	bl	800051c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <prvCheckTasksWaitingTermination+0x54>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <prvCheckTasksWaitingTermination+0x54>)
 8001ae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <prvCheckTasksWaitingTermination+0x58>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <prvCheckTasksWaitingTermination+0x58>)
 8001aec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001aee:	f000 fe05 	bl	80026fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f810 	bl	8001b18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <prvCheckTasksWaitingTermination+0x58>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e1      	bne.n	8001ac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000bd8 	.word	0x20000bd8
 8001b10:	20000c04 	.word	0x20000c04
 8001b14:	20000bec 	.word	0x20000bec

08001b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 ffa2 	bl	8002a78 <vPortFree>
				vPortFree( pxTCB );
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 ff9f 	bl	8002a78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001b3a:	e019      	b.n	8001b70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d103      	bne.n	8001b4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 ff96 	bl	8002a78 <vPortFree>
	}
 8001b4c:	e010      	b.n	8001b70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d00b      	beq.n	8001b70 <prvDeleteTCB+0x58>
	__asm volatile
 8001b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	60fb      	str	r3, [r7, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <prvDeleteTCB+0x54>
	}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <prvResetNextTaskUnblockTime+0x38>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d104      	bne.n	8001b92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <prvResetNextTaskUnblockTime+0x3c>)
 8001b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001b90:	e008      	b.n	8001ba4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b92:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <prvResetNextTaskUnblockTime+0x38>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <prvResetNextTaskUnblockTime+0x3c>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	20000bbc 	.word	0x20000bbc
 8001bb4:	20000c24 	.word	0x20000c24

08001bb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <xTaskGetSchedulerState+0x34>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	e008      	b.n	8001bde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <xTaskGetSchedulerState+0x38>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	e001      	b.n	8001bde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001bde:	687b      	ldr	r3, [r7, #4]
	}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000c10 	.word	0x20000c10
 8001bf0:	20000c2c 	.word	0x20000c2c

08001bf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d058      	beq.n	8001cbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <xTaskPriorityDisinherit+0xd4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d00b      	beq.n	8001c2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8001c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	60fb      	str	r3, [r7, #12]
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8001c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	f3bf 8f4f 	dsb	sy
 8001c44:	60bb      	str	r3, [r7, #8]
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d02c      	beq.n	8001cbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d128      	bne.n	8001cbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc54 	bl	800051c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <xTaskPriorityDisinherit+0xd8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d903      	bls.n	8001c9c <xTaskPriorityDisinherit+0xa8>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ccc <xTaskPriorityDisinherit+0xd8>)
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <xTaskPriorityDisinherit+0xdc>)
 8001caa:	441a      	add	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7fe fbd5 	bl	8000462 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001cbc:	697b      	ldr	r3, [r7, #20]
	}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000730 	.word	0x20000730
 8001ccc:	20000c0c 	.word	0x20000c0c
 8001cd0:	20000734 	.word	0x20000734

08001cd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <prvAddCurrentTaskToDelayedList+0x90>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ce4:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc16 	bl	800051c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf6:	d10a      	bne.n	8001d0e <prvAddCurrentTaskToDelayedList+0x3a>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3304      	adds	r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4819      	ldr	r0, [pc, #100]	@ (8001d6c <prvAddCurrentTaskToDelayedList+0x98>)
 8001d08:	f7fe fbab 	bl	8000462 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001d0c:	e026      	b.n	8001d5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d209      	bcs.n	8001d3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f7fe fbb9 	bl	80004aa <vListInsert>
}
 8001d38:	e010      	b.n	8001d5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <prvAddCurrentTaskToDelayedList+0x94>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3304      	adds	r3, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f7fe fbaf 	bl	80004aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d202      	bcs.n	8001d5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001d56:	4a08      	ldr	r2, [pc, #32]	@ (8001d78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000c08 	.word	0x20000c08
 8001d68:	20000730 	.word	0x20000730
 8001d6c:	20000bf0 	.word	0x20000bf0
 8001d70:	20000bc0 	.word	0x20000bc0
 8001d74:	20000bbc 	.word	0x20000bbc
 8001d78:	20000c24 	.word	0x20000c24

08001d7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001d86:	f000 fb13 	bl	80023b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <xTimerCreateTimerTask+0x84>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d021      	beq.n	8001dd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8001d9a:	1d3a      	adds	r2, r7, #4
 8001d9c:	f107 0108 	add.w	r1, r7, #8
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fb15 	bl	80003d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	9202      	str	r2, [sp, #8]
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	2302      	movs	r3, #2
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2300      	movs	r3, #0
 8001dba:	460a      	mov	r2, r1
 8001dbc:	4911      	ldr	r1, [pc, #68]	@ (8001e04 <xTimerCreateTimerTask+0x88>)
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <xTimerCreateTimerTask+0x8c>)
 8001dc0:	f7ff f8d0 	bl	8000f64 <xTaskCreateStatic>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <xTimerCreateTimerTask+0x90>)
 8001dc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <xTimerCreateTimerTask+0x90>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8001ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	613b      	str	r3, [r7, #16]
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8001df4:	697b      	ldr	r3, [r7, #20]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000c60 	.word	0x20000c60
 8001e04:	080030b8 	.word	0x080030b8
 8001e08:	08001f49 	.word	0x08001f49
 8001e0c:	20000c64 	.word	0x20000c64

08001e10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <xTimerGenericCommand+0x30>
	__asm volatile
 8001e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e2c:	f383 8811 	msr	BASEPRI, r3
 8001e30:	f3bf 8f6f 	isb	sy
 8001e34:	f3bf 8f4f 	dsb	sy
 8001e38:	623b      	str	r3, [r7, #32]
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <xTimerGenericCommand+0x98>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d02a      	beq.n	8001e9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	dc18      	bgt.n	8001e8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001e5a:	f7ff fead 	bl	8001bb8 <xTaskGetSchedulerState>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d109      	bne.n	8001e78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <xTimerGenericCommand+0x98>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f107 0110 	add.w	r1, r7, #16
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e70:	f7fe fc88 	bl	8000784 <xQueueGenericSend>
 8001e74:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e76:	e012      	b.n	8001e9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <xTimerGenericCommand+0x98>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	f107 0110 	add.w	r1, r7, #16
 8001e80:	2300      	movs	r3, #0
 8001e82:	2200      	movs	r2, #0
 8001e84:	f7fe fc7e 	bl	8000784 <xQueueGenericSend>
 8001e88:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e8a:	e008      	b.n	8001e9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <xTimerGenericCommand+0x98>)
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f107 0110 	add.w	r1, r7, #16
 8001e94:	2300      	movs	r3, #0
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	f7fe fd76 	bl	8000988 <xQueueGenericSendFromISR>
 8001e9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3728      	adds	r7, #40	@ 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000c60 	.word	0x20000c60

08001eac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eb6:	4b23      	ldr	r3, [pc, #140]	@ (8001f44 <prvProcessExpiredTimer+0x98>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb29 	bl	800051c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	18d1      	adds	r1, r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	6978      	ldr	r0, [r7, #20]
 8001ee6:	f000 f8d5 	bl	8002094 <prvInsertTimerInActiveList>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	2100      	movs	r1, #0
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff88 	bl	8001e10 <xTimerGenericCommand>
 8001f00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d114      	bne.n	8001f32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8001f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f0c:	f383 8811 	msr	BASEPRI, r3
 8001f10:	f3bf 8f6f 	isb	sy
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	60fb      	str	r3, [r7, #12]
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	4798      	blx	r3
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000c58 	.word	0x20000c58

08001f48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f859 	bl	800200c <prvGetNextExpireTime>
 8001f5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 f805 	bl	8001f70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8001f66:	f000 f8d7 	bl	8002118 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001f6a:	bf00      	nop
 8001f6c:	e7f0      	b.n	8001f50 <prvTimerTask+0x8>
	...

08001f70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001f7a:	f7ff fa37 	bl	80013ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f866 	bl	8002054 <prvSampleTimeNow>
 8001f88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d130      	bne.n	8001ff2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10a      	bne.n	8001fac <prvProcessTimerOrBlockTask+0x3c>
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d806      	bhi.n	8001fac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8001f9e:	f7ff fa33 	bl	8001408 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001fa2:	68f9      	ldr	r1, [r7, #12]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff81 	bl	8001eac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8001faa:	e024      	b.n	8001ff6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <prvProcessTimerOrBlockTask+0x90>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <prvProcessTimerOrBlockTask+0x50>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <prvProcessTimerOrBlockTask+0x52>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <prvProcessTimerOrBlockTask+0x94>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7fe ff93 	bl	8000efc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001fd6:	f7ff fa17 	bl	8001408 <xTaskResumeAll>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10a      	bne.n	8001ff6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <prvProcessTimerOrBlockTask+0x98>)
 8001fe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f3bf 8f4f 	dsb	sy
 8001fec:	f3bf 8f6f 	isb	sy
}
 8001ff0:	e001      	b.n	8001ff6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8001ff2:	f7ff fa09 	bl	8001408 <xTaskResumeAll>
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000c5c 	.word	0x20000c5c
 8002004:	20000c60 	.word	0x20000c60
 8002008:	e000ed04 	.word	0xe000ed04

0800200c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <prvGetNextExpireTime+0x44>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <prvGetNextExpireTime+0x16>
 800201e:	2201      	movs	r2, #1
 8002020:	e000      	b.n	8002024 <prvGetNextExpireTime+0x18>
 8002022:	2200      	movs	r2, #0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <prvGetNextExpireTime+0x44>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e001      	b.n	8002040 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002040:	68fb      	ldr	r3, [r7, #12]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000c58 	.word	0x20000c58

08002054 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800205c:	f7ff fa72 	bl	8001544 <xTaskGetTickCount>
 8002060:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <prvSampleTimeNow+0x3c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d205      	bcs.n	8002078 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800206c:	f000 f93a 	bl	80022e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e002      	b.n	800207e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800207e:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <prvSampleTimeNow+0x3c>)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002084:	68fb      	ldr	r3, [r7, #12]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000c68 	.word	0x20000c68

08002094 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d812      	bhi.n	80020e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	1ad2      	subs	r2, r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d302      	bcc.n	80020ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e01b      	b.n	8002106 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <prvInsertTimerInActiveList+0x7c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3304      	adds	r3, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4610      	mov	r0, r2
 80020da:	f7fe f9e6 	bl	80004aa <vListInsert>
 80020de:	e012      	b.n	8002106 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d206      	bcs.n	80020f6 <prvInsertTimerInActiveList+0x62>
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d302      	bcc.n	80020f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80020f0:	2301      	movs	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e007      	b.n	8002106 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <prvInsertTimerInActiveList+0x80>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3304      	adds	r3, #4
 80020fe:	4619      	mov	r1, r3
 8002100:	4610      	mov	r0, r2
 8002102:	f7fe f9d2 	bl	80004aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002106:	697b      	ldr	r3, [r7, #20]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000c5c 	.word	0x20000c5c
 8002114:	20000c58 	.word	0x20000c58

08002118 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08e      	sub	sp, #56	@ 0x38
 800211c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800211e:	e0ce      	b.n	80022be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	da19      	bge.n	800215a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	3304      	adds	r3, #4
 800212a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800212c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8002132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	61fb      	str	r3, [r7, #28]
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	e7fd      	b.n	8002146 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800214a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002150:	6850      	ldr	r0, [r2, #4]
 8002152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	4611      	mov	r1, r2
 8002158:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f2c0 80ae 	blt.w	80022be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	3304      	adds	r3, #4
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f9d2 	bl	800051c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002178:	463b      	mov	r3, r7
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff6a 	bl	8002054 <prvSampleTimeNow>
 8002180:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b09      	cmp	r3, #9
 8002186:	f200 8097 	bhi.w	80022b8 <prvProcessReceivedCommands+0x1a0>
 800218a:	a201      	add	r2, pc, #4	@ (adr r2, 8002190 <prvProcessReceivedCommands+0x78>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	080021b9 	.word	0x080021b9
 8002194:	080021b9 	.word	0x080021b9
 8002198:	080021b9 	.word	0x080021b9
 800219c:	0800222f 	.word	0x0800222f
 80021a0:	08002243 	.word	0x08002243
 80021a4:	0800228f 	.word	0x0800228f
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021b9 	.word	0x080021b9
 80021b0:	0800222f 	.word	0x0800222f
 80021b4:	08002243 	.word	0x08002243
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	18d1      	adds	r1, r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021d8:	f7ff ff5c 	bl	8002094 <prvInsertTimerInActiveList>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d06c      	beq.n	80022bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d061      	beq.n	80022bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	441a      	add	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2300      	movs	r3, #0
 8002206:	2100      	movs	r1, #0
 8002208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800220a:	f7ff fe01 	bl	8001e10 <xTimerGenericCommand>
 800220e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d152      	bne.n	80022bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8002216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	61bb      	str	r3, [r7, #24]
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	e7fd      	b.n	800222a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8002240:	e03d      	b.n	80022be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800225a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10b      	bne.n	800227a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8002262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002266:	f383 8811 	msr	BASEPRI, r3
 800226a:	f3bf 8f6f 	isb	sy
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	617b      	str	r3, [r7, #20]
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	e7fd      	b.n	8002276 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	18d1      	adds	r1, r2, r3
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002288:	f7ff ff04 	bl	8002094 <prvInsertTimerInActiveList>
					break;
 800228c:	e017      	b.n	80022be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800228e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d103      	bne.n	80022a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800229c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800229e:	f000 fbeb 	bl	8002a78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80022a2:	e00c      	b.n	80022be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80022b6:	e002      	b.n	80022be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80022b8:	bf00      	nop
 80022ba:	e000      	b.n	80022be <prvProcessReceivedCommands+0x1a6>
					break;
 80022bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <prvProcessReceivedCommands+0x1c8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1d39      	adds	r1, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fbfc 	bl	8000ac4 <xQueueReceive>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f af26 	bne.w	8002120 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3730      	adds	r7, #48	@ 0x30
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000c60 	.word	0x20000c60

080022e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022ea:	e049      	b.n	8002380 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022ec:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <prvSwitchTimerLists+0xc4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022f6:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <prvSwitchTimerLists+0xc4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3304      	adds	r3, #4
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f909 	bl	800051c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d02f      	beq.n	8002380 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	429a      	cmp	r2, r3
 8002330:	d90e      	bls.n	8002350 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <prvSwitchTimerLists+0xc4>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3304      	adds	r3, #4
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7fe f8ae 	bl	80004aa <vListInsert>
 800234e:	e017      	b.n	8002380 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002350:	2300      	movs	r3, #0
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	2100      	movs	r1, #0
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff fd58 	bl	8001e10 <xTimerGenericCommand>
 8002360:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	603b      	str	r3, [r7, #0]
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <prvSwitchTimerLists+0xc4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1b0      	bne.n	80022ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <prvSwitchTimerLists+0xc4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <prvSwitchTimerLists+0xc8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <prvSwitchTimerLists+0xc4>)
 8002396:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002398:	4a04      	ldr	r2, [pc, #16]	@ (80023ac <prvSwitchTimerLists+0xc8>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	6013      	str	r3, [r2, #0]
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000c58 	.word	0x20000c58
 80023ac:	20000c5c 	.word	0x20000c5c

080023b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80023b6:	f000 f96f 	bl	8002698 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <prvCheckForValidListAndQueue+0x60>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d120      	bne.n	8002404 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80023c2:	4814      	ldr	r0, [pc, #80]	@ (8002414 <prvCheckForValidListAndQueue+0x64>)
 80023c4:	f7fe f820 	bl	8000408 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80023c8:	4813      	ldr	r0, [pc, #76]	@ (8002418 <prvCheckForValidListAndQueue+0x68>)
 80023ca:	f7fe f81d 	bl	8000408 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <prvCheckForValidListAndQueue+0x6c>)
 80023d0:	4a10      	ldr	r2, [pc, #64]	@ (8002414 <prvCheckForValidListAndQueue+0x64>)
 80023d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <prvCheckForValidListAndQueue+0x70>)
 80023d6:	4a10      	ldr	r2, [pc, #64]	@ (8002418 <prvCheckForValidListAndQueue+0x68>)
 80023d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <prvCheckForValidListAndQueue+0x74>)
 80023e0:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <prvCheckForValidListAndQueue+0x78>)
 80023e2:	2110      	movs	r1, #16
 80023e4:	200a      	movs	r0, #10
 80023e6:	f7fe f92d 	bl	8000644 <xQueueGenericCreateStatic>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a08      	ldr	r2, [pc, #32]	@ (8002410 <prvCheckForValidListAndQueue+0x60>)
 80023ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80023f0:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <prvCheckForValidListAndQueue+0x60>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <prvCheckForValidListAndQueue+0x60>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	490b      	ldr	r1, [pc, #44]	@ (800242c <prvCheckForValidListAndQueue+0x7c>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fd52 	bl	8000ea8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002404:	f000 f97a 	bl	80026fc <vPortExitCritical>
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000c60 	.word	0x20000c60
 8002414:	20000c30 	.word	0x20000c30
 8002418:	20000c44 	.word	0x20000c44
 800241c:	20000c58 	.word	0x20000c58
 8002420:	20000c5c 	.word	0x20000c5c
 8002424:	20000d0c 	.word	0x20000d0c
 8002428:	20000c6c 	.word	0x20000c6c
 800242c:	080030c0 	.word	0x080030c0

08002430 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3b04      	subs	r3, #4
 8002440:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3b04      	subs	r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f023 0201 	bic.w	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b04      	subs	r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002460:	4a0c      	ldr	r2, [pc, #48]	@ (8002494 <pxPortInitialiseStack+0x64>)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b14      	subs	r3, #20
 800246a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3b04      	subs	r3, #4
 8002476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f06f 0202 	mvn.w	r2, #2
 800247e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3b20      	subs	r3, #32
 8002484:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	08002499 	.word	0x08002499

08002498 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80024a2:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <prvTaskExitError+0x58>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d00b      	beq.n	80024c4 <prvTaskExitError+0x2c>
	__asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	60fb      	str	r3, [r7, #12]
}
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <prvTaskExitError+0x28>
	__asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	60bb      	str	r3, [r7, #8]
}
 80024d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80024d8:	bf00      	nop
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0fc      	beq.n	80024da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
	...

08002500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002500:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <pxCurrentTCBConst2>)
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	6808      	ldr	r0, [r1, #0]
 8002506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800250a:	f380 8809 	msr	PSP, r0
 800250e:	f3bf 8f6f 	isb	sy
 8002512:	f04f 0000 	mov.w	r0, #0
 8002516:	f380 8811 	msr	BASEPRI, r0
 800251a:	4770      	bx	lr
 800251c:	f3af 8000 	nop.w

08002520 <pxCurrentTCBConst2>:
 8002520:	20000730 	.word	0x20000730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop

08002528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002528:	4808      	ldr	r0, [pc, #32]	@ (800254c <prvPortStartFirstTask+0x24>)
 800252a:	6800      	ldr	r0, [r0, #0]
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	f380 8808 	msr	MSP, r0
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f380 8814 	msr	CONTROL, r0
 800253a:	b662      	cpsie	i
 800253c:	b661      	cpsie	f
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	df00      	svc	0
 8002548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800254a:	bf00      	nop
 800254c:	e000ed08 	.word	0xe000ed08

08002550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002556:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <xPortStartScheduler+0x124>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a47      	ldr	r2, [pc, #284]	@ (8002678 <xPortStartScheduler+0x128>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d10b      	bne.n	8002578 <xPortStartScheduler+0x28>
	__asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	613b      	str	r3, [r7, #16]
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002578:	4b3e      	ldr	r3, [pc, #248]	@ (8002674 <xPortStartScheduler+0x124>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3f      	ldr	r2, [pc, #252]	@ (800267c <xPortStartScheduler+0x12c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10b      	bne.n	800259a <xPortStartScheduler+0x4a>
	__asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	60fb      	str	r3, [r7, #12]
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	e7fd      	b.n	8002596 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800259a:	4b39      	ldr	r3, [pc, #228]	@ (8002680 <xPortStartScheduler+0x130>)
 800259c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	22ff      	movs	r2, #255	@ 0xff
 80025aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <xPortStartScheduler+0x134>)
 80025c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025c2:	4b31      	ldr	r3, [pc, #196]	@ (8002688 <xPortStartScheduler+0x138>)
 80025c4:	2207      	movs	r2, #7
 80025c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025c8:	e009      	b.n	80025de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80025ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002688 <xPortStartScheduler+0x138>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <xPortStartScheduler+0x138>)
 80025d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e6:	2b80      	cmp	r3, #128	@ 0x80
 80025e8:	d0ef      	beq.n	80025ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025ea:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <xPortStartScheduler+0x138>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d00b      	beq.n	800260e <xPortStartScheduler+0xbe>
	__asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	60bb      	str	r3, [r7, #8]
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	e7fd      	b.n	800260a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800260e:	4b1e      	ldr	r3, [pc, #120]	@ (8002688 <xPortStartScheduler+0x138>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <xPortStartScheduler+0x138>)
 8002616:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <xPortStartScheduler+0x138>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002620:	4a19      	ldr	r2, [pc, #100]	@ (8002688 <xPortStartScheduler+0x138>)
 8002622:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800262c:	4b17      	ldr	r3, [pc, #92]	@ (800268c <xPortStartScheduler+0x13c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a16      	ldr	r2, [pc, #88]	@ (800268c <xPortStartScheduler+0x13c>)
 8002632:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002636:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002638:	4b14      	ldr	r3, [pc, #80]	@ (800268c <xPortStartScheduler+0x13c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a13      	ldr	r2, [pc, #76]	@ (800268c <xPortStartScheduler+0x13c>)
 800263e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002642:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002644:	f000 f8da 	bl	80027fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <xPortStartScheduler+0x140>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800264e:	f000 f8f9 	bl	8002844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002652:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <xPortStartScheduler+0x144>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0f      	ldr	r2, [pc, #60]	@ (8002694 <xPortStartScheduler+0x144>)
 8002658:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800265c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800265e:	f7ff ff63 	bl	8002528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002662:	f7ff f839 	bl	80016d8 <vTaskSwitchContext>
	prvTaskExitError();
 8002666:	f7ff ff17 	bl	8002498 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	e000ed00 	.word	0xe000ed00
 8002678:	410fc271 	.word	0x410fc271
 800267c:	410fc270 	.word	0x410fc270
 8002680:	e000e400 	.word	0xe000e400
 8002684:	20000d5c 	.word	0x20000d5c
 8002688:	20000d60 	.word	0x20000d60
 800268c:	e000ed20 	.word	0xe000ed20
 8002690:	20000008 	.word	0x20000008
 8002694:	e000ef34 	.word	0xe000ef34

08002698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
	__asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	607b      	str	r3, [r7, #4]
}
 80026b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <vPortEnterCritical+0x5c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <vPortEnterCritical+0x5c>)
 80026ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80026bc:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <vPortEnterCritical+0x5c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d110      	bne.n	80026e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <vPortEnterCritical+0x60>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	603b      	str	r3, [r7, #0]
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	e7fd      	b.n	80026e2 <vPortEnterCritical+0x4a>
	}
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000008 	.word	0x20000008
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002702:	4b12      	ldr	r3, [pc, #72]	@ (800274c <vPortExitCritical+0x50>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <vPortExitCritical+0x26>
	__asm volatile
 800270a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	607b      	str	r3, [r7, #4]
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	e7fd      	b.n	800271e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <vPortExitCritical+0x50>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3b01      	subs	r3, #1
 8002728:	4a08      	ldr	r2, [pc, #32]	@ (800274c <vPortExitCritical+0x50>)
 800272a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800272c:	4b07      	ldr	r3, [pc, #28]	@ (800274c <vPortExitCritical+0x50>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <vPortExitCritical+0x44>
 8002734:	2300      	movs	r3, #0
 8002736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f383 8811 	msr	BASEPRI, r3
}
 800273e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	20000008 	.word	0x20000008

08002750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002750:	f3ef 8009 	mrs	r0, PSP
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <pxCurrentTCBConst>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f01e 0f10 	tst.w	lr, #16
 8002760:	bf08      	it	eq
 8002762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276a:	6010      	str	r0, [r2, #0]
 800276c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002774:	f380 8811 	msr	BASEPRI, r0
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f7fe ffaa 	bl	80016d8 <vTaskSwitchContext>
 8002784:	f04f 0000 	mov.w	r0, #0
 8002788:	f380 8811 	msr	BASEPRI, r0
 800278c:	bc09      	pop	{r0, r3}
 800278e:	6819      	ldr	r1, [r3, #0]
 8002790:	6808      	ldr	r0, [r1, #0]
 8002792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002796:	f01e 0f10 	tst.w	lr, #16
 800279a:	bf08      	it	eq
 800279c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80027a0:	f380 8809 	msr	PSP, r0
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	f3af 8000 	nop.w

080027b0 <pxCurrentTCBConst>:
 80027b0:	20000730 	.word	0x20000730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop

080027b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
	__asm volatile
 80027be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	607b      	str	r3, [r7, #4]
}
 80027d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80027d2:	f7fe fec7 	bl	8001564 <xTaskIncrementTick>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <xPortSysTickHandler+0x40>)
 80027de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	2300      	movs	r3, #0
 80027e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f383 8811 	msr	BASEPRI, r3
}
 80027ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	e000ed04 	.word	0xe000ed04

080027fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <vPortSetupTimerInterrupt+0x34>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002806:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <vPortSetupTimerInterrupt+0x38>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <vPortSetupTimerInterrupt+0x3c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <vPortSetupTimerInterrupt+0x40>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <vPortSetupTimerInterrupt+0x44>)
 800281a:	3b01      	subs	r3, #1
 800281c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800281e:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <vPortSetupTimerInterrupt+0x34>)
 8002820:	2207      	movs	r2, #7
 8002822:	601a      	str	r2, [r3, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e010 	.word	0xe000e010
 8002834:	e000e018 	.word	0xe000e018
 8002838:	20000000 	.word	0x20000000
 800283c:	10624dd3 	.word	0x10624dd3
 8002840:	e000e014 	.word	0xe000e014

08002844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002844:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002854 <vPortEnableVFP+0x10>
 8002848:	6801      	ldr	r1, [r0, #0]
 800284a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800284e:	6001      	str	r1, [r0, #0]
 8002850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002852:	bf00      	nop
 8002854:	e000ed88 	.word	0xe000ed88

08002858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800285e:	f3ef 8305 	mrs	r3, IPSR
 8002862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	d915      	bls.n	8002896 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800286a:	4a18      	ldr	r2, [pc, #96]	@ (80028cc <vPortValidateInterruptPriority+0x74>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002874:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <vPortValidateInterruptPriority+0x78>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	7afa      	ldrb	r2, [r7, #11]
 800287a:	429a      	cmp	r2, r3
 800287c:	d20b      	bcs.n	8002896 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	607b      	str	r3, [r7, #4]
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	e7fd      	b.n	8002892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002896:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <vPortValidateInterruptPriority+0x7c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <vPortValidateInterruptPriority+0x80>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d90b      	bls.n	80028be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	603b      	str	r3, [r7, #0]
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	e7fd      	b.n	80028ba <vPortValidateInterruptPriority+0x62>
	}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e3f0 	.word	0xe000e3f0
 80028d0:	20000d5c 	.word	0x20000d5c
 80028d4:	e000ed0c 	.word	0xe000ed0c
 80028d8:	20000d60 	.word	0x20000d60

080028dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	@ 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80028e8:	f7fe fd80 	bl	80013ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80028ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002a60 <pvPortMalloc+0x184>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80028f4:	f000 f924 	bl	8002b40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80028f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a64 <pvPortMalloc+0x188>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 8095 	bne.w	8002a30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01e      	beq.n	800294a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800290c:	2208      	movs	r2, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f023 0307 	bic.w	r3, r3, #7
 8002924:	3308      	adds	r3, #8
 8002926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <pvPortMalloc+0x6e>
	__asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	617b      	str	r3, [r7, #20]
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	e7fd      	b.n	8002946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d06f      	beq.n	8002a30 <pvPortMalloc+0x154>
 8002950:	4b45      	ldr	r3, [pc, #276]	@ (8002a68 <pvPortMalloc+0x18c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	429a      	cmp	r2, r3
 8002958:	d86a      	bhi.n	8002a30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800295a:	4b44      	ldr	r3, [pc, #272]	@ (8002a6c <pvPortMalloc+0x190>)
 800295c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800295e:	4b43      	ldr	r3, [pc, #268]	@ (8002a6c <pvPortMalloc+0x190>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002964:	e004      	b.n	8002970 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d903      	bls.n	8002982 <pvPortMalloc+0xa6>
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f1      	bne.n	8002966 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002982:	4b37      	ldr	r3, [pc, #220]	@ (8002a60 <pvPortMalloc+0x184>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002988:	429a      	cmp	r2, r3
 800298a:	d051      	beq.n	8002a30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2208      	movs	r2, #8
 8002992:	4413      	add	r3, r2
 8002994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1ad2      	subs	r2, r2, r3
 80029a6:	2308      	movs	r3, #8
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d920      	bls.n	80029f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <pvPortMalloc+0xfc>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	613b      	str	r3, [r7, #16]
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80029ea:	69b8      	ldr	r0, [r7, #24]
 80029ec:	f000 f90a 	bl	8002c04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <pvPortMalloc+0x18c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002a68 <pvPortMalloc+0x18c>)
 80029fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80029fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <pvPortMalloc+0x18c>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <pvPortMalloc+0x194>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d203      	bcs.n	8002a12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a0a:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <pvPortMalloc+0x18c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a18      	ldr	r2, [pc, #96]	@ (8002a70 <pvPortMalloc+0x194>)
 8002a10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <pvPortMalloc+0x188>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <pvPortMalloc+0x198>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <pvPortMalloc+0x198>)
 8002a2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a30:	f7fe fcea 	bl	8001408 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <pvPortMalloc+0x17a>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	60fb      	str	r3, [r7, #12]
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	e7fd      	b.n	8002a52 <pvPortMalloc+0x176>
	return pvReturn;
 8002a56:	69fb      	ldr	r3, [r7, #28]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3728      	adds	r7, #40	@ 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000496c 	.word	0x2000496c
 8002a64:	20004980 	.word	0x20004980
 8002a68:	20004970 	.word	0x20004970
 8002a6c:	20004964 	.word	0x20004964
 8002a70:	20004974 	.word	0x20004974
 8002a74:	20004978 	.word	0x20004978

08002a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d04f      	beq.n	8002b2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	425b      	negs	r3, r3
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4413      	add	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4b25      	ldr	r3, [pc, #148]	@ (8002b34 <vPortFree+0xbc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <vPortFree+0x46>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	60fb      	str	r3, [r7, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	e7fd      	b.n	8002aba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <vPortFree+0x66>
	__asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	60bb      	str	r3, [r7, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	e7fd      	b.n	8002ada <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <vPortFree+0xbc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01e      	beq.n	8002b2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11a      	bne.n	8002b2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <vPortFree+0xbc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b04:	f7fe fc72 	bl	80013ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <vPortFree+0xc0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a09      	ldr	r2, [pc, #36]	@ (8002b38 <vPortFree+0xc0>)
 8002b14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b16:	6938      	ldr	r0, [r7, #16]
 8002b18:	f000 f874 	bl	8002c04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <vPortFree+0xc4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a06      	ldr	r2, [pc, #24]	@ (8002b3c <vPortFree+0xc4>)
 8002b24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002b26:	f7fe fc6f 	bl	8001408 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20004980 	.word	0x20004980
 8002b38:	20004970 	.word	0x20004970
 8002b3c:	2000497c 	.word	0x2000497c

08002b40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002b4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b4c:	4b27      	ldr	r3, [pc, #156]	@ (8002bec <prvHeapInit+0xac>)
 8002b4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3307      	adds	r3, #7
 8002b5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bec <prvHeapInit+0xac>)
 8002b70:	4413      	add	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b78:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf0 <prvHeapInit+0xb0>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf0 <prvHeapInit+0xb0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4413      	add	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0307 	bic.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a15      	ldr	r2, [pc, #84]	@ (8002bf4 <prvHeapInit+0xb4>)
 8002ba0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002ba2:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <prvHeapInit+0xb4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <prvHeapInit+0xb4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	1ad2      	subs	r2, r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <prvHeapInit+0xb4>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <prvHeapInit+0xb8>)
 8002bce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <prvHeapInit+0xbc>)
 8002bd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <prvHeapInit+0xc0>)
 8002bda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	20000d64 	.word	0x20000d64
 8002bf0:	20004964 	.word	0x20004964
 8002bf4:	2000496c 	.word	0x2000496c
 8002bf8:	20004974 	.word	0x20004974
 8002bfc:	20004970 	.word	0x20004970
 8002c00:	20004980 	.word	0x20004980

08002c04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c0c:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <prvInsertBlockIntoFreeList+0xac>)
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e002      	b.n	8002c18 <prvInsertBlockIntoFreeList+0x14>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d8f7      	bhi.n	8002c12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d108      	bne.n	8002c46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	441a      	add	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d118      	bne.n	8002c8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d00d      	beq.n	8002c82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	441a      	add	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e008      	b.n	8002c94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002c82:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e003      	b.n	8002c94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d002      	beq.n	8002ca2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20004964 	.word	0x20004964
 8002cb4:	2000496c 	.word	0x2000496c

08002cb8 <gpio_pin_set_dir>:
#include "gpio.h"
#include "stm32f446xx.h"

#define GPIO_GET_PORT_ADDR(port) ((uintptr_t)GPIOA + (GPIO_PORT_REGISTER_OFFSET*port))

gpio_ret_t gpio_pin_set_dir(gpio_port_t port, gpio_pin_t pin, gpio_dir_t direction) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	71bb      	strb	r3, [r7, #6]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	717b      	strb	r3, [r7, #5]
    GPIO_TypeDef *portAddr = (GPIO_TypeDef*)GPIO_GET_PORT_ADDR(port);
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	029b      	lsls	r3, r3, #10
 8002cce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cd2:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002cd6:	60fb      	str	r3, [r7, #12]

    portAddr->MODER &= ~(0b11 << pin * 2);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	79ba      	ldrb	r2, [r7, #6]
 8002cde:	0052      	lsls	r2, r2, #1
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce6:	43d2      	mvns	r2, r2
 8002ce8:	401a      	ands	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	601a      	str	r2, [r3, #0]
    portAddr->MODER |= (direction << pin * 2);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	7979      	ldrb	r1, [r7, #5]
 8002cf4:	79ba      	ldrb	r2, [r7, #6]
 8002cf6:	0052      	lsls	r2, r2, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	601a      	str	r2, [r3, #0]

    return gpioSuccess;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <gpio_pin_write>:

gpio_ret_t gpio_pin_write(gpio_port_t port, gpio_pin_t pin, gpio_level_t level) {
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	71bb      	strb	r3, [r7, #6]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	717b      	strb	r3, [r7, #5]
    GPIO_TypeDef *portAddr = (GPIO_TypeDef*)GPIO_GET_PORT_ADDR(port);
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d2a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002d2e:	60fb      	str	r3, [r7, #12]

    // TODO: add validation logic to ensure port and pin are configured for output
    if(level == gpioPinHigh) {
 8002d30:	797b      	ldrb	r3, [r7, #5]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d109      	bne.n	8002d4a <gpio_pin_write+0x3a>
        portAddr->ODR |= (1 << pin);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	79ba      	ldrb	r2, [r7, #6]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	431a      	orrs	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	615a      	str	r2, [r3, #20]
 8002d48:	e009      	b.n	8002d5e <gpio_pin_write+0x4e>
    } else {
        portAddr->ODR &= ~(1 << pin);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	79ba      	ldrb	r2, [r7, #6]
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	43d2      	mvns	r2, r2
 8002d58:	401a      	ands	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	615a      	str	r2, [r3, #20]
    }

    return gpioSuccess;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <gpio_port_set_dir>:
    }

    return gpioSuccess;
}

gpio_ret_t gpio_port_set_dir(gpio_port_t port, gpio_dir_t direction) {
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	460a      	mov	r2, r1
 8002d76:	71fb      	strb	r3, [r7, #7]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71bb      	strb	r3, [r7, #6]
    GPIO_TypeDef *portAddr = (GPIO_TypeDef*)GPIO_GET_PORT_ADDR(port);
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d84:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]

    portAddr->MODER &= ~0xFFFFFFFF;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

    for(uint8_t pin = 0; pin < 16; pin++) {
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	e00c      	b.n	8002db4 <gpio_port_set_dir+0x48>
        portAddr->MODER |= (direction << pin * 2);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	79b9      	ldrb	r1, [r7, #6]
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	0052      	lsls	r2, r2, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	601a      	str	r2, [r3, #0]
    for(uint8_t pin = 0; pin < 16; pin++) {
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	3301      	adds	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	d9ef      	bls.n	8002d9a <gpio_port_set_dir+0x2e>
    }

    return gpioSuccess;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <rcc_enable_peripheral_clk>:
#include "rcc.h"
#include "stm32f446xx.h"

rcc_ret_t rcc_enable_peripheral_clk(rcc_peripheral_clk_t peripheral) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
    uint32_t peripheralBitmask = (1 << peripheral % 32);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	2201      	movs	r2, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	60fb      	str	r3, [r7, #12]
    volatile uint32_t dummy;

    switch(peripheral / 4) {
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d84d      	bhi.n	8002e86 <rcc_enable_peripheral_clk+0xbe>
 8002dea:	a201      	add	r2, pc, #4	@ (adr r2, 8002df0 <rcc_enable_peripheral_clk+0x28>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e05 	.word	0x08002e05
 8002df4:	08002e1f 	.word	0x08002e1f
 8002df8:	08002e39 	.word	0x08002e39
 8002dfc:	08002e53 	.word	0x08002e53
 8002e00:	08002e6d 	.word	0x08002e6d
        case 0:
            RCC->AHB1ENR |= peripheralBitmask;
 8002e04:	4b23      	ldr	r3, [pc, #140]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e08:	4922      	ldr	r1, [pc, #136]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	630b      	str	r3, [r1, #48]	@ 0x30
            dummy = RCC->AHB1ENR;
 8002e10:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	60bb      	str	r3, [r7, #8]
            dummy = RCC->AHB1ENR;
 8002e16:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	60bb      	str	r3, [r7, #8]
            break;
 8002e1c:	e033      	b.n	8002e86 <rcc_enable_peripheral_clk+0xbe>
        case 1:
            RCC->AHB2ENR |= peripheralBitmask;
 8002e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e22:	491c      	ldr	r1, [pc, #112]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	634b      	str	r3, [r1, #52]	@ 0x34
            dummy = RCC->AHB2ENR;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2e:	60bb      	str	r3, [r7, #8]
            dummy = RCC->AHB2ENR;
 8002e30:	4b18      	ldr	r3, [pc, #96]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e34:	60bb      	str	r3, [r7, #8]
            break;
 8002e36:	e026      	b.n	8002e86 <rcc_enable_peripheral_clk+0xbe>
        case 2:
            RCC->AHB3ENR |= peripheralBitmask;
 8002e38:	4b16      	ldr	r3, [pc, #88]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e3c:	4915      	ldr	r1, [pc, #84]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	638b      	str	r3, [r1, #56]	@ 0x38
            dummy = RCC->AHB3ENR;
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	60bb      	str	r3, [r7, #8]
            dummy = RCC->AHB3ENR;
 8002e4a:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	60bb      	str	r3, [r7, #8]
            break;
 8002e50:	e019      	b.n	8002e86 <rcc_enable_peripheral_clk+0xbe>
        case 3:
            RCC->APB1ENR |= peripheralBitmask;
 8002e52:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e56:	490f      	ldr	r1, [pc, #60]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	640b      	str	r3, [r1, #64]	@ 0x40
            dummy = RCC->APB1ENR;
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	60bb      	str	r3, [r7, #8]
            dummy = RCC->APB1ENR;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	60bb      	str	r3, [r7, #8]
            break;
 8002e6a:	e00c      	b.n	8002e86 <rcc_enable_peripheral_clk+0xbe>
        case 4:
            RCC->APB2ENR |= peripheralBitmask;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e70:	4908      	ldr	r1, [pc, #32]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	644b      	str	r3, [r1, #68]	@ 0x44
            dummy = RCC->APB2ENR;
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7c:	60bb      	str	r3, [r7, #8]
            dummy = RCC->APB2ENR;
 8002e7e:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <rcc_enable_peripheral_clk+0xcc>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	60bb      	str	r3, [r7, #8]
            break;
 8002e84:	bf00      	nop
    }

    return rccSuccess;
 8002e86:	2301      	movs	r3, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40023800 	.word	0x40023800

08002e98 <initDisplay>:
q7seg_pin_t q7segPins[Q7SEG_PIN_NUM] = {q7segPinA, q7segPinB, q7segPinC, q7segPinD, q7segPinE, q7segPinF, q7segPinG, q7segPinDp};
q7seg_seg_t q7segSegs[Q7SEG_SEG_NUM] = {q7seg1, q7seg2, q7seg3, q7seg4};

/// @brief Initializes display by setting up GPIO
/// @return Status of operation
q7seg_ret_t initDisplay() {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
    rcc_enable_peripheral_clk(rccClkGpioB);
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f7ff ff93 	bl	8002dc8 <rcc_enable_peripheral_clk>
    gpio_port_set_dir(Q7SEG_GPIO_PORT, gpioOutput);
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f7ff ff61 	bl	8002d6c <gpio_port_set_dir>

    return q7segSuccess;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <writeNum>:

/// @brief Writes to the GPIO pins to set the number section of display
/// @param num Base-10 number to display
/// @return Status of operation
q7seg_ret_t writeNum(uint8_t num) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
    uint16_t bitmask = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	81fb      	strh	r3, [r7, #14]

    // Clear all pins to erase last config
    for(uint8_t i = 0; i < Q7SEG_PIN_NUM; i++) {
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	737b      	strb	r3, [r7, #13]
 8002ec2:	e00a      	b.n	8002eda <writeNum+0x2a>
        gpio_pin_write(Q7SEG_GPIO_PORT, q7segPins[i], gpioPinHigh);
 8002ec4:	7b7b      	ldrb	r3, [r7, #13]
 8002ec6:	4a45      	ldr	r2, [pc, #276]	@ (8002fdc <writeNum+0x12c>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4619      	mov	r1, r3
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f7ff ff1e 	bl	8002d10 <gpio_pin_write>
    for(uint8_t i = 0; i < Q7SEG_PIN_NUM; i++) {
 8002ed4:	7b7b      	ldrb	r3, [r7, #13]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	737b      	strb	r3, [r7, #13]
 8002eda:	7b7b      	ldrb	r3, [r7, #13]
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	d9f1      	bls.n	8002ec4 <writeNum+0x14>
    }

    // Determine bitmask based on number
    switch(num) {
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	d856      	bhi.n	8002f94 <writeNum+0xe4>
 8002ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <writeNum+0x3c>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f15 	.word	0x08002f15
 8002ef0:	08002f23 	.word	0x08002f23
 8002ef4:	08002f2d 	.word	0x08002f2d
 8002ef8:	08002f3b 	.word	0x08002f3b
 8002efc:	08002f49 	.word	0x08002f49
 8002f00:	08002f53 	.word	0x08002f53
 8002f04:	08002f61 	.word	0x08002f61
 8002f08:	08002f6f 	.word	0x08002f6f
 8002f0c:	08002f79 	.word	0x08002f79
 8002f10:	08002f87 	.word	0x08002f87
        case 0:
            bitmask |= (1 << q7segPinA) | (1 << q7segPinB) | (1 << q7segPinC) | (1 << q7segPinD) | (1 << q7segPinE) | (1 << q7segPinF); 
 8002f14:	89fb      	ldrh	r3, [r7, #14]
 8002f16:	f443 63c9 	orr.w	r3, r3, #1608	@ 0x648
 8002f1a:	f043 0303 	orr.w	r3, r3, #3
 8002f1e:	81fb      	strh	r3, [r7, #14]
            break;
 8002f20:	e038      	b.n	8002f94 <writeNum+0xe4>
        case 1:
            bitmask |= (1 << q7segPinB) | (1 << q7segPinC); 
 8002f22:	89fb      	ldrh	r3, [r7, #14]
 8002f24:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 8002f28:	81fb      	strh	r3, [r7, #14]
            break;
 8002f2a:	e033      	b.n	8002f94 <writeNum+0xe4>
        case 2:
            bitmask |= (1 << q7segPinA) | (1 << q7segPinB) | (1 << q7segPinG) | (1 << q7segPinE) | (1 << q7segPinD); 
 8002f2c:	89fb      	ldrh	r3, [r7, #14]
 8002f2e:	f443 638a 	orr.w	r3, r3, #1104	@ 0x450
 8002f32:	f043 0303 	orr.w	r3, r3, #3
 8002f36:	81fb      	strh	r3, [r7, #14]
            break;
 8002f38:	e02c      	b.n	8002f94 <writeNum+0xe4>
        case 3:
            bitmask |= (1 << q7segPinA) | (1 << q7segPinB) | (1 << q7segPinG) | (1 << q7segPinC) | (1 << q7segPinD);  
 8002f3a:	89fb      	ldrh	r3, [r7, #14]
 8002f3c:	f443 638b 	orr.w	r3, r3, #1112	@ 0x458
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	81fb      	strh	r3, [r7, #14]
            break;
 8002f46:	e025      	b.n	8002f94 <writeNum+0xe4>
        case 4:
            bitmask |= (1 << q7segPinF) | (1 << q7segPinB) | (1 << q7segPinG) | (1 << q7segPinC); 
 8002f48:	89fb      	ldrh	r3, [r7, #14]
 8002f4a:	f443 7316 	orr.w	r3, r3, #600	@ 0x258
 8002f4e:	81fb      	strh	r3, [r7, #14]
            break;
 8002f50:	e020      	b.n	8002f94 <writeNum+0xe4>
        case 5:
            bitmask |= (1 << q7segPinA) | (1 << q7segPinF) | (1 << q7segPinG) | (1 << q7segPinC) | (1 << q7segPinD); 
 8002f52:	89fb      	ldrh	r3, [r7, #14]
 8002f54:	f443 63c3 	orr.w	r3, r3, #1560	@ 0x618
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	81fb      	strh	r3, [r7, #14]
            break;
 8002f5e:	e019      	b.n	8002f94 <writeNum+0xe4>
        case 6:
            bitmask |= (1 << q7segPinA) | (1 << q7segPinG) | (1 << q7segPinC) | (1 << q7segPinD) | (1 << q7segPinE) | (1 << q7segPinF); 
 8002f60:	89fb      	ldrh	r3, [r7, #14]
 8002f62:	f443 63c3 	orr.w	r3, r3, #1560	@ 0x618
 8002f66:	f043 0303 	orr.w	r3, r3, #3
 8002f6a:	81fb      	strh	r3, [r7, #14]
            break;
 8002f6c:	e012      	b.n	8002f94 <writeNum+0xe4>
        case 7:
            bitmask |= (1 << q7segPinA) | (1 << q7segPinB) | (1 << q7segPinC); 
 8002f6e:	89fb      	ldrh	r3, [r7, #14]
 8002f70:	f443 6389 	orr.w	r3, r3, #1096	@ 0x448
 8002f74:	81fb      	strh	r3, [r7, #14]
            break;
 8002f76:	e00d      	b.n	8002f94 <writeNum+0xe4>
        case 8:
            bitmask |= (1 << q7segPinA) | (1 << q7segPinB) | (1 << q7segPinC) | (1 << q7segPinD) | (1 << q7segPinE) | (1 << q7segPinF) | (1 << q7segPinG); 
 8002f78:	89fb      	ldrh	r3, [r7, #14]
 8002f7a:	f443 63cb 	orr.w	r3, r3, #1624	@ 0x658
 8002f7e:	f043 0303 	orr.w	r3, r3, #3
 8002f82:	81fb      	strh	r3, [r7, #14]
            break;
 8002f84:	e006      	b.n	8002f94 <writeNum+0xe4>
        case 9:
            bitmask |= (1 << q7segPinA) | (1 << q7segPinB) | (1 << q7segPinC) | (1 << q7segPinD) | (1 << q7segPinF) | (1 << q7segPinG); 
 8002f86:	89fb      	ldrh	r3, [r7, #14]
 8002f88:	f443 63cb 	orr.w	r3, r3, #1624	@ 0x658
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	81fb      	strh	r3, [r7, #14]
            break;
 8002f92:	bf00      	nop
    }

    // Set all pins to new config
    for(uint8_t i = 0; i < Q7SEG_PIN_NUM; i++) {
 8002f94:	2300      	movs	r3, #0
 8002f96:	733b      	strb	r3, [r7, #12]
 8002f98:	e017      	b.n	8002fca <writeNum+0x11a>
        uint8_t shiftedBit = ~(bitmask >> q7segPins[i]) & 1U;
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	7b3a      	ldrb	r2, [r7, #12]
 8002f9e:	490f      	ldr	r1, [pc, #60]	@ (8002fdc <writeNum+0x12c>)
 8002fa0:	5c8a      	ldrb	r2, [r1, r2]
 8002fa2:	4113      	asrs	r3, r2
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	72fb      	strb	r3, [r7, #11]
        gpio_pin_write(Q7SEG_GPIO_PORT, q7segPins[i], shiftedBit);
 8002fb4:	7b3b      	ldrb	r3, [r7, #12]
 8002fb6:	4a09      	ldr	r2, [pc, #36]	@ (8002fdc <writeNum+0x12c>)
 8002fb8:	5cd3      	ldrb	r3, [r2, r3]
 8002fba:	7afa      	ldrb	r2, [r7, #11]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7ff fea6 	bl	8002d10 <gpio_pin_write>
    for(uint8_t i = 0; i < Q7SEG_PIN_NUM; i++) {
 8002fc4:	7b3b      	ldrb	r3, [r7, #12]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	733b      	strb	r3, [r7, #12]
 8002fca:	7b3b      	ldrb	r3, [r7, #12]
 8002fcc:	2b07      	cmp	r3, #7
 8002fce:	d9e4      	bls.n	8002f9a <writeNum+0xea>
    }

    return q7segSuccess;
 8002fd0:	2301      	movs	r3, #1
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	2000000c 	.word	0x2000000c

08002fe0 <writeDisplaySingle>:
/// @brief Writes a single segment on Q7Seg display
/// @param segment Segment to write to
/// @param num Base-10 number to display
/// @param dp Whether or not we want the DP active 
/// @return Status of operation
q7seg_ret_t writeDisplaySingle(q7seg_seg_t segment, uint8_t num, uint8_t dp) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	460b      	mov	r3, r1
 8002fec:	71bb      	strb	r3, [r7, #6]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	717b      	strb	r3, [r7, #5]
    // Enable segment
    gpio_pin_write(Q7SEG_GPIO_PORT, segment, gpioPinHigh);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f7ff fe89 	bl	8002d10 <gpio_pin_write>

    // Set display point
    gpio_pin_write(Q7SEG_GPIO_PORT, q7segPinDp, dp);
 8002ffe:	797b      	ldrb	r3, [r7, #5]
 8003000:	461a      	mov	r2, r3
 8003002:	2102      	movs	r1, #2
 8003004:	2001      	movs	r0, #1
 8003006:	f7ff fe83 	bl	8002d10 <gpio_pin_write>

    // Write number
    writeNum(num);
 800300a:	79bb      	ldrb	r3, [r7, #6]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff4f 	bl	8002eb0 <writeNum>

    return q7segSuccess;
 8003012:	2301      	movs	r3, #1
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <memset>:
 800301c:	4402      	add	r2, r0
 800301e:	4603      	mov	r3, r0
 8003020:	4293      	cmp	r3, r2
 8003022:	d100      	bne.n	8003026 <memset+0xa>
 8003024:	4770      	bx	lr
 8003026:	f803 1b01 	strb.w	r1, [r3], #1
 800302a:	e7f9      	b.n	8003020 <memset+0x4>

0800302c <__libc_init_array>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	4d0d      	ldr	r5, [pc, #52]	@ (8003064 <__libc_init_array+0x38>)
 8003030:	4c0d      	ldr	r4, [pc, #52]	@ (8003068 <__libc_init_array+0x3c>)
 8003032:	1b64      	subs	r4, r4, r5
 8003034:	10a4      	asrs	r4, r4, #2
 8003036:	2600      	movs	r6, #0
 8003038:	42a6      	cmp	r6, r4
 800303a:	d109      	bne.n	8003050 <__libc_init_array+0x24>
 800303c:	4d0b      	ldr	r5, [pc, #44]	@ (800306c <__libc_init_array+0x40>)
 800303e:	4c0c      	ldr	r4, [pc, #48]	@ (8003070 <__libc_init_array+0x44>)
 8003040:	f000 f826 	bl	8003090 <_init>
 8003044:	1b64      	subs	r4, r4, r5
 8003046:	10a4      	asrs	r4, r4, #2
 8003048:	2600      	movs	r6, #0
 800304a:	42a6      	cmp	r6, r4
 800304c:	d105      	bne.n	800305a <__libc_init_array+0x2e>
 800304e:	bd70      	pop	{r4, r5, r6, pc}
 8003050:	f855 3b04 	ldr.w	r3, [r5], #4
 8003054:	4798      	blx	r3
 8003056:	3601      	adds	r6, #1
 8003058:	e7ee      	b.n	8003038 <__libc_init_array+0xc>
 800305a:	f855 3b04 	ldr.w	r3, [r5], #4
 800305e:	4798      	blx	r3
 8003060:	3601      	adds	r6, #1
 8003062:	e7f2      	b.n	800304a <__libc_init_array+0x1e>
 8003064:	080030c8 	.word	0x080030c8
 8003068:	080030c8 	.word	0x080030c8
 800306c:	080030c8 	.word	0x080030c8
 8003070:	080030cc 	.word	0x080030cc

08003074 <memcpy>:
 8003074:	440a      	add	r2, r1
 8003076:	4291      	cmp	r1, r2
 8003078:	f100 33ff 	add.w	r3, r0, #4294967295
 800307c:	d100      	bne.n	8003080 <memcpy+0xc>
 800307e:	4770      	bx	lr
 8003080:	b510      	push	{r4, lr}
 8003082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800308a:	4291      	cmp	r1, r2
 800308c:	d1f9      	bne.n	8003082 <memcpy+0xe>
 800308e:	bd10      	pop	{r4, pc}

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
